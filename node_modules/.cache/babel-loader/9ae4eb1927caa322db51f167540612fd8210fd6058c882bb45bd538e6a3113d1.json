{"ast":null,"code":"var _jsxFileName = \"/home/poodle/Work/TimeBoxing/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { Button } from './components/ui/Button';\nimport { Card, CardHeader, CardTitle, CardContent } from './components/ui/Card';\nimport TaskForm from './components/TaskForm';\nimport TaskList from './components/TaskList';\nimport { Toaster } from './components/Toaster';\nimport { toast } from './hooks/use-toast';\nimport confetti from 'canvas-confetti';\n// Spirals components will be added later\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst motivationalQuotes = [\"You won\\'t be able to do it... Prove me wrong!\", \"Don\\'t disappoint future you.\", \"Less scrolling, more doing!\", \"That task isn\\'t going to complete itself.\", \"Are you a talker or a doer?\", \"Time is ticking. Are you?\", \"Stop procrastinating. Start dominating.\", \"Is this the best use of your time right now?\", \"The clock is your boss. Don\\'t get fired.\"];\nconst POINTS_PER_TASK = 10;\nconst BONUS_POINTS_FACTOR = 0.5; // points per second saved\nconst DEFAULT_BREAK_DURATION_MINUTES = 5;\nfunction App() {\n  _s();\n  const [naggingQuote, setNaggingQuote] = useState(\"\");\n  const [tasks, setTasks] = useState([]);\n  const [spirals, setSpirals] = useState([]); // For spirals feature\n\n  const [currentTaskIndex, setCurrentTaskIndex] = useState(-1); // Index of the active task in the tasks array\n  const [timeRemaining, setTimeRemaining] = useState(0); // In seconds\n  const [isTimerActive, setIsTimerActive] = useState(false); // Is the countdown interval running?\n  const [isBreakTime, setIsBreakTime] = useState(false);\n  const timerIntervalId = useRef(null); // Using useRef to hold interval ID to avoid re-renders causing issues\n\n  const [score, setScore] = useState(0);\n  const notificationSound = useRef(null);\n  const quoteIntervalId = useRef(null);\n\n  // Initialize nagging quote, sound, and notification permissions\n  useEffect(() => {\n    const getRandomQuote = () => motivationalQuotes[Math.floor(Math.random() * motivationalQuotes.length)];\n    setNaggingQuote(getRandomQuote());\n    notificationSound.current = new Audio('/assets/notification.mp3');\n    if (Notification.permission !== \"granted\" && Notification.permission !== \"denied\") {\n      Notification.requestPermission().then(permission => {\n        if (permission === \"granted\") console.log(\"Desktop notification permission granted.\");\n      });\n    }\n  }, []);\n  const playNotificationSound = useCallback(() => {\n    var _notificationSound$cu;\n    (_notificationSound$cu = notificationSound.current) === null || _notificationSound$cu === void 0 ? void 0 : _notificationSound$cu.play().catch(error => console.error(\"Error playing sound:\", error));\n  }, []);\n  const showDesktopNotification = useCallback((title, body) => {\n    if (Notification.permission === \"granted\") new Notification(title, {\n      body\n    });\n  }, []);\n\n  // Nagging quote logic\n  const updateNaggingQuote = useCallback(() => {\n    const getRandomQuote = () => motivationalQuotes[Math.floor(Math.random() * motivationalQuotes.length)];\n    setNaggingQuote(getRandomQuote());\n  }, []);\n  const startNaggingQuoteInterval = useCallback(() => {\n    if (!isTimerActive && !quoteIntervalId.current) {\n      updateNaggingQuote();\n      quoteIntervalId.current = setInterval(updateNaggingQuote, 30000);\n    }\n  }, [isTimerActive, updateNaggingQuote]);\n  const stopNaggingQuoteInterval = useCallback(() => {\n    if (quoteIntervalId.current) {\n      clearInterval(quoteIntervalId.current);\n      quoteIntervalId.current = null;\n    }\n  }, []);\n  useEffect(() => {\n    if (isTimerActive) {\n      stopNaggingQuoteInterval();\n    } else {\n      startNaggingQuoteInterval();\n    }\n    return () => stopNaggingQuoteInterval(); // Cleanup on unmount\n  }, [isTimerActive, startNaggingQuoteInterval, stopNaggingQuoteInterval]);\n\n  // Task Management\n  const handleAddTask = useCallback(newTaskData => {\n    setTasks(prevTasks => [...prevTasks, {\n      id: Date.now(),\n      name: newTaskData.name,\n      duration: newTaskData.duration,\n      // user input in minutes\n      estimatedDuration: newTaskData.duration,\n      completed: false,\n      started: false,\n      timeSpentSeconds: 0,\n      timerStartTime: null,\n      completionTimestamp: null\n    }]);\n    toast({\n      title: \"Task Added\",\n      description: `\"${newTaskData.name}\" added to your list.`\n    });\n  }, []);\n  const handleRemoveTask = useCallback(taskId => {\n    var _tasks$currentTaskInd;\n    const taskToRemove = tasks.find(t => t.id === taskId);\n    setTasks(prevTasks => prevTasks.filter(task => task.id !== taskId));\n    if (taskToRemove) {\n      toast({\n        title: \"Task Removed\",\n        description: `\"${taskToRemove.name}\" has been removed.`,\n        variant: \"destructive\"\n      });\n    }\n    if (currentTaskIndex !== -1 && ((_tasks$currentTaskInd = tasks[currentTaskIndex]) === null || _tasks$currentTaskInd === void 0 ? void 0 : _tasks$currentTaskInd.id) === taskId) {\n      if (timerIntervalId.current) clearInterval(timerIntervalId.current);\n      timerIntervalId.current = null;\n      setCurrentTaskIndex(-1);\n      setTimeRemaining(0);\n      setIsTimerActive(false);\n      setIsBreakTime(false);\n    }\n  }, [tasks, currentTaskIndex]);\n\n  // Timer Core Logic: Start, Pause, Resume, Done, Extend\n  const startTimer = useCallback(taskIndex => {\n    // Guard 1: Basic validity and completion check\n    if (taskIndex < 0 || taskIndex >= tasks.length || !tasks[taskIndex]) {\n      toast({\n        title: \"Invalid Task\",\n        description: \"Task not found or index is out of bounds.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    if (tasks[taskIndex].completed) {\n      toast({\n        title: \"Task Completed\",\n        description: `\"${tasks[taskIndex].name}\" is already completed.`,\n        variant: \"default\"\n      });\n      return;\n    }\n\n    // Guard 2: Check if another task is active or this specific one\n    if (isTimerActive && !isBreakTime && currentTaskIndex === taskIndex) {\n      toast({\n        title: \"Already Active\",\n        description: `\"${tasks[taskIndex].name}\" is already running.`,\n        variant: \"default\"\n      });\n      return;\n    }\n    if (isTimerActive && !isBreakTime && currentTaskIndex !== -1 && currentTaskIndex !== taskIndex) {\n      var _tasks$currentTaskInd2;\n      toast({\n        title: \"Timer Busy\",\n        description: `\"${((_tasks$currentTaskInd2 = tasks[currentTaskIndex]) === null || _tasks$currentTaskInd2 === void 0 ? void 0 : _tasks$currentTaskInd2.name) || 'Another task'}\" is in progress. Complete or stop it first.`,\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Guard 3: Handle active break\n    if (isBreakTime) {\n      if (timerIntervalId.current) clearInterval(timerIntervalId.current);\n      timerIntervalId.current = null;\n      setIsBreakTime(false); // Stop the break\n      toast({\n        title: \"Break Interrupted\",\n        description: \"Starting a new task.\"\n      });\n    }\n    const taskToStart = tasks[taskIndex];\n\n    // This extra check is for absolute safety, though guards above should cover it.\n    if (!taskToStart || typeof taskToStart.duration === 'undefined') {\n      console.error(\"Critical error: taskToStart is invalid despite guards. taskIndex:\", taskIndex, \"task:\", taskToStart);\n      toast({\n        title: \"Task Data Error\",\n        description: \"Cannot start task due to incomplete data. Please check console.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    setTasks(prevTasks => prevTasks.map((task, idx) => idx === taskIndex ? {\n      ...task,\n      started: true,\n      timerStartTime: Date.now(),\n      timeSpentSeconds: task.timeSpentSeconds || 0\n    } : task));\n    setCurrentTaskIndex(taskIndex);\n    // If task was partially worked on, resume from remaining, else from full duration\n    const timeToSet = taskToStart.duration * 60 - (taskToStart.timeSpentSeconds || 0);\n    setTimeRemaining(timeToSet > 0 ? timeToSet : taskToStart.duration * 60); // Ensure it doesn't start negative\n    setIsTimerActive(true);\n    setIsBreakTime(false); // Ensure break mode is off\n    toast({\n      title: \"Task Started\",\n      description: `Timer for \"${taskToStart.name}\" has begun.`\n    });\n  }, [tasks, isTimerActive, isBreakTime, currentTaskIndex]);\n  const handlePauseTimer = useCallback(() => {\n    if (timerIntervalId.current) {\n      clearInterval(timerIntervalId.current);\n      timerIntervalId.current = null;\n      // Note: isTimerActive remains true to indicate a resumable state, interval is just cleared.\n      toast({\n        title: \"Timer Paused\"\n      });\n    }\n  }, []);\n  const handleResumeTimer = useCallback(() => {\n    if (isTimerActive && !timerIntervalId.current && timeRemaining > 0) {\n      // The useEffect for countdown will pick this up because isTimerActive is true and intervalId is null\n      toast({\n        title: \"Timer Resumed\"\n      });\n    } else if (!isTimerActive && currentTaskIndex !== -1 && !isBreakTime && tasks[currentTaskIndex] && !tasks[currentTaskIndex].completed && timeRemaining > 0) {\n      // This case is if timer was fully stopped (e.g. by done) but we want to resume a task that wasn't finished\n      // For now, startTimer handles this if the user clicks start on task list\n      // Or main start button could call this.\n      setIsTimerActive(true); // Trigger the interval\n    }\n  }, [isTimerActive, timeRemaining, currentTaskIndex, tasks, isBreakTime]);\n  const handleTaskDone = useCallback(() => {\n    if (currentTaskIndex === -1 || !tasks[currentTaskIndex] || tasks[currentTaskIndex].completed) return;\n    const task = tasks[currentTaskIndex];\n    let pointsEarnedThisTask = POINTS_PER_TASK;\n    const estimatedSeconds = task.estimatedDuration * 60;\n    if (task.timeSpentSeconds < estimatedSeconds) {\n      const secondsSaved = estimatedSeconds - task.timeSpentSeconds;\n      const bonus = Math.floor(secondsSaved * BONUS_POINTS_FACTOR);\n      pointsEarnedThisTask += bonus;\n    }\n    setScore(prevScore => prevScore + pointsEarnedThisTask);\n    confetti({\n      particleCount: 150,\n      spread: 100,\n      origin: {\n        y: 0.6\n      }\n    });\n    setTasks(prevTasks => prevTasks.map((t, idx) => idx === currentTaskIndex ? {\n      ...t,\n      completed: true,\n      duration: t.timeSpentSeconds / 60,\n      completionTimestamp: Date.now()\n    } : t));\n    if (timerIntervalId.current) clearInterval(timerIntervalId.current);\n    timerIntervalId.current = null;\n    setIsTimerActive(false); // Fully stop timer activity for this task\n\n    playNotificationSound();\n    showDesktopNotification(\"Task Finished!\", `\"${task.name}\" is complete.`);\n    toast({\n      title: \"Task Finished!\",\n      description: `\"${task.name}\" complete. Points: +${pointsEarnedThisTask}`\n    });\n    // Show score popup will be a dialog or animated div - for later\n\n    // Start a break\n    setIsBreakTime(true);\n    setTimeRemaining(DEFAULT_BREAK_DURATION_MINUTES * 60);\n    setIsTimerActive(true); // Start break timer countdown via useEffect\n    setCurrentTaskIndex(-1); // No task is active during break\n    toast({\n      title: \"Break Time!\",\n      description: `Taking a ${DEFAULT_BREAK_DURATION_MINUTES} minute break.`\n    });\n  }, [tasks, currentTaskIndex, playNotificationSound, showDesktopNotification]);\n  const handleExtendTimer = useCallback(() => {\n    const extendMinutesText = prompt(\"Extend by how many minutes?\", \"5\");\n    if (extendMinutesText === null) return; // User cancelled\n    const extendMinutes = parseInt(extendMinutesText, 10);\n    if (!isNaN(extendMinutes) && extendMinutes > 0) {\n      setTimeRemaining(prev => prev + extendMinutes * 60);\n      if (currentTaskIndex !== -1 && !isBreakTime) {\n        setTasks(prevTasks => prevTasks.map((t, idx) => idx === currentTaskIndex ? {\n          ...t,\n          duration: t.duration + extendMinutes\n        } : t));\n      }\n      // If timer was paused (no intervalId) but now has time, and was active, it will resume via useEffect\n      // If timer wasn't active but now has time, user needs to click resume/start.\n      // We can make it auto-resume if it was paused:\n      if (isTimerActive && !timerIntervalId.current && timeRemaining + extendMinutes * 60 > 0) {\n        // The useEffect will pick this up to start a new interval if isTimerActive is true\n      }\n      toast({\n        title: \"Timer Extended\",\n        description: `Added ${extendMinutes} minutes.`\n      });\n    } else {\n      toast({\n        title: \"Invalid Input\",\n        description: \"Please enter a valid number of minutes.\",\n        variant: \"destructive\"\n      });\n    }\n  }, [currentTaskIndex, isBreakTime, isTimerActive, timeRemaining]);\n\n  // Effect for Timer Countdown\n  useEffect(() => {\n    if (isTimerActive && !timerIntervalId.current && timeRemaining > 0) {\n      timerIntervalId.current = setInterval(() => {\n        setTimeRemaining(prevTime => {\n          if (prevTime <= 1) {\n            // Reaches 0 on next tick\n            clearInterval(timerIntervalId.current);\n            timerIntervalId.current = null;\n            // isTimerActive remains true until user acts or break auto-ends\n\n            if (isBreakTime) {\n              playNotificationSound();\n              showDesktopNotification(\"Break Over!\", \"Your break time is up.\");\n              toast({\n                title: \"Break Finished!\",\n                description: \"Ready for the next task?\"\n              });\n              setIsBreakTime(false);\n              setIsTimerActive(false); // Fully stop timer\n              setCurrentTaskIndex(-1);\n            } else if (currentTaskIndex !== -1) {\n              const task = tasks[currentTaskIndex];\n              playNotificationSound();\n              showDesktopNotification(\"Time's Up!\", `Time for \"${task.name}\" is up.`);\n              toast({\n                title: \"Time's Up!\",\n                description: `\"${task.name}\" timer finished. Mark done or extend.`\n              });\n              // isTimerActive remains true to allow extend/done\n            }\n            return 0;\n          }\n          // Increment timeSpentSeconds for active task\n          if (currentTaskIndex !== -1 && !isBreakTime) {\n            setTasks(prevTasks => prevTasks.map((task, idx) => idx === currentTaskIndex ? {\n              ...task,\n              timeSpentSeconds: task.timeSpentSeconds + 1\n            } : task));\n          }\n          return prevTime - 1;\n        });\n      }, 1000);\n    } else if ((!isTimerActive || timeRemaining === 0) && timerIntervalId.current) {\n      // This condition handles explicit pause or if time ran out and another action cleared isTimerActive\n      clearInterval(timerIntervalId.current);\n      timerIntervalId.current = null;\n    }\n    // Cleanup function\n    return () => {\n      if (timerIntervalId.current) {\n        clearInterval(timerIntervalId.current);\n        timerIntervalId.current = null; // Ensure it's clear for next effect run\n      }\n    };\n  }, [isTimerActive, timeRemaining, tasks, currentTaskIndex, isBreakTime, playNotificationSound, showDesktopNotification]);\n\n  // Formatting and Display Logic\n  const formatTime = totalSeconds => {\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;\n  };\n  const timerDisplayColor = () => {\n    if (isBreakTime || currentTaskIndex === -1 || !tasks[currentTaskIndex] || tasks[currentTaskIndex].completed) return 'text-timerAccent';\n    const task = tasks[currentTaskIndex];\n    const totalTaskSeconds = task.estimatedDuration * 60;\n    if (totalTaskSeconds === 0) return 'text-timerAccent';\n    const percentageRemaining = timeRemaining / totalTaskSeconds * 100;\n    if (percentageRemaining <= 20) return 'text-red-500';\n    if (percentageRemaining <= 50) return 'text-yellow-500';\n    return 'text-timerAccent';\n  };\n  const calculateDailyStats = useCallback(() => {\n    const totalDuration = tasks.reduce((acc, task) => acc + task.estimatedDuration, 0);\n    let activeTaskTime = 0;\n    if (currentTaskIndex !== -1 && tasks[currentTaskIndex] && !tasks[currentTaskIndex].completed && !isBreakTime) {\n      activeTaskTime = timeRemaining > 0 ? timeRemaining : 0; // if timer is up, count 0 unless extended\n    }\n    const unstartedTasksDuration = tasks.filter(task => !task.started && !task.completed).reduce((acc, task) => acc + task.estimatedDuration * 60, 0);\n    const remainingSeconds = activeTaskTime + unstartedTasksDuration;\n    // Probability calculation can be refined later\n    return {\n      totalPlannedTime: totalDuration,\n      remainingTaskTime: Math.ceil(remainingSeconds / 60),\n      probNotFinishing: 0 // Placeholder\n    };\n  }, [tasks, currentTaskIndex, timeRemaining, isBreakTime]);\n  const dailyStats = calculateDailyStats();\n  const activeTaskObject = currentTaskIndex !== -1 && tasks[currentTaskIndex] ? tasks[currentTaskIndex] : null;\n  const currentDisplayTaskName = isBreakTime ? \"Break Time!\" : activeTaskObject ? activeTaskObject.name : \"None\";\n\n  // Spirals handlers (to be implemented)\n  const handleAddSpiral = useCallback(spiralName => {\n    if (!spiralName.trim()) {\n      toast({\n        title: \"Invalid Spiral\",\n        description: \"Spiral name cannot be empty.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    setSpirals(prev => [...prev, {\n      id: Date.now(),\n      name: spiralName.trim()\n    }]);\n    toast({\n      title: \"Spiral Added\",\n      description: `\"${spiralName.trim()}\" added to spirals.`\n    });\n  }, []);\n  const handleRemoveSpiral = useCallback(spiralId => {\n    const spiralToRemove = spirals.find(s => s.id === spiralId);\n    setSpirals(prev => prev.filter(s => s.id !== spiralId));\n    if (spiralToRemove) {\n      toast({\n        title: \"Spiral Removed\",\n        description: `\"${spiralToRemove.name}\" removed.`,\n        variant: \"destructive\"\n      });\n    }\n  }, [spirals]);\n  const handleMoveSpiralToTasks = useCallback(spiralId => {\n    const spiralToMove = spirals.find(s => s.id === spiralId);\n    if (!spiralToMove) return;\n    const durationText = prompt(`Enter estimated duration (minutes) for task \"${spiralToMove.name}\":`, \"30\");\n    if (durationText === null) return; // User cancelled\n    const duration = parseInt(durationText, 10);\n    if (duration && duration > 0) {\n      handleAddTask({\n        name: spiralToMove.name,\n        duration\n      });\n      setSpirals(prev => prev.filter(s => s.id !== spiralId));\n    } else {\n      toast({\n        title: \"Invalid Duration\",\n        description: \"Please enter a positive number for duration.\",\n        variant: \"destructive\"\n      });\n    }\n  }, [spirals, handleAddTask]);\n\n  // JSX will be in the next part\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-dark text-lightText p-4 sm:p-6 md:p-8\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"bg-dark-100 p-6 rounded-lg shadow-lg mb-8 ring-1 ring-dark-300\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-4xl font-bold text-center text-cyanAccent\",\n        children: \"Time Boxer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 9\n      }, this), naggingQuote && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-center text-subtleText italic mt-2\",\n        children: naggingQuote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"max-w-7xl mx-auto grid grid-cols-1 lg:grid-cols-3 gap-6\",\n      children: [/*#__PURE__*/_jsxDEV(Card, {\n        className: \"lg:col-span-3 bg-dark-100 ring-1 ring-dark-300\",\n        children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n          className: \"text-center\",\n          children: /*#__PURE__*/_jsxDEV(CardTitle, {\n            className: \"text-2xl font-semibold text-cyanAccent\",\n            children: [\"Current Task: \", currentDisplayTaskName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 396,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n          className: \"text-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"timer-clock-react\",\n            className: `text-8xl font-bold text-${timerDisplayColor()} my-4`,\n            children: formatTime(timeRemaining)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"space-x-2 mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              variant: \"buttonBlue\",\n              size: \"lg\",\n              disabled: !tasks[currentTaskIndex] || !tasks[currentTaskIndex].started || isTimerActive,\n              children: \"Start/Resume\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"buttonGray\",\n              size: \"lg\",\n              disabled: !isTimerActive,\n              children: \"Pause\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 404,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"buttonGray\",\n              size: \"lg\",\n              disabled: !tasks[currentTaskIndex] || !tasks[currentTaskIndex].started,\n              children: \"Extend Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"buttonGreen\",\n              size: \"lg\",\n              className: \"w-full max-w-xs mx-auto\",\n              disabled: !tasks[currentTaskIndex] || !tasks[currentTaskIndex].started,\n              children: \"Done!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 408,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        className: \"lg:col-span-1 bg-dark-100 ring-1 ring-dark-300\",\n        children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n          children: /*#__PURE__*/_jsxDEV(CardTitle, {\n            className: \"text-xl font-semibold text-cyanAccent\",\n            children: \"Plan Your Day\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(TaskForm, {\n            onAddTask: handleAddTask\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-6 pt-6 border-t border-dark-300 space-y-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"text-md font-semibold text-cyanAccent mb-3\",\n              children: \"Daily Stats\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 420,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm text-subtleText flex justify-between\",\n              children: [\"Total Planned: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-timerAccent font-semibold\",\n                children: [dailyStats.totalPlannedTime, \" min\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 421,\n                columnNumber: 92\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 421,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm text-subtleText flex justify-between\",\n              children: [\"Remaining: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-timerAccent font-semibold\",\n                children: [dailyStats.remainingTaskTime, \" min\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 422,\n                columnNumber: 88\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 422,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm text-subtleText flex justify-between\",\n              children: [\"P(Not Finishing): \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-timerAccent font-semibold\",\n                children: [dailyStats.probNotFinishing, \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 423,\n                columnNumber: 95\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 423,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        className: \"lg:col-span-2 bg-dark-100 ring-1 ring-dark-300\",\n        children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n          children: /*#__PURE__*/_jsxDEV(CardTitle, {\n            className: \"text-xl font-semibold text-cyanAccent\",\n            children: \"Today's Tasks\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n          children: /*#__PURE__*/_jsxDEV(TaskList, {\n            tasks: tasks,\n            onRemoveTask: handleRemoveTask,\n            onStartTask: taskId => {\n              const currentTasks = tasks; // Capture for logging & consistent check\n              const taskIndex = currentTasks.findIndex(t => t.id === taskId);\n              console.log('[App onStartTask] Attempting to start task:', {\n                taskId,\n                taskIndex,\n                currentTasksLength: currentTasks.length,\n                currentTasksIds: currentTasks.map(t => t.id)\n              });\n              if (taskIndex !== -1) {\n                // Pre-flight check using the same logic as startTimer's first guard\n                if (taskIndex < 0 || taskIndex >= currentTasks.length || !currentTasks[taskIndex]) {\n                  console.error(\"[App onStartTask PRE-CHECK FAILED] taskIndex out of bounds for current tasks.\", {\n                    taskId,\n                    taskIndex,\n                    currentTasksLength: currentTasks.length\n                  });\n                  toast({\n                    title: \"Task Sync Issue\",\n                    description: \"State inconsistency before starting timer. Please try again.\",\n                    variant: \"destructive\"\n                  });\n                  return;\n                }\n                startTimer(taskIndex);\n              } else {\n                console.error(\"[App onStartTask] Task ID not found in current tasks:\", {\n                  taskId\n                });\n                toast({\n                  title: \"Task Not Found\",\n                  description: \"The selected task could not be found to start.\",\n                  variant: \"destructive\"\n                });\n              }\n            },\n            currentTaskIndex: currentTaskIndex // Pass the index\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        className: \"lg:col-span-3 bg-dark-100 ring-1 ring-dark-300\",\n        children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n          children: /*#__PURE__*/_jsxDEV(CardTitle, {\n            className: \"text-xl font-semibold text-cyanAccent\",\n            children: \"Spirals (For Later)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 473,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-subtleText\",\n            children: \"Spirals management coming soon...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 476,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 475,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"bg-dark-100 text-subtleText p-6 rounded-lg shadow-lg mt-8 text-center ring-1 ring-dark-300\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm\",\n        children: [\"Score: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-timerAccent font-semibold\",\n          children: score\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 39\n        }, this), \" | Tasks Completed: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-timerAccent font-semibold\",\n          children: tasks.filter(t => t.completed).length\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 122\n        }, this), \" | Focus Time: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-timerAccent font-semibold\",\n          children: [dailyStats.remainingTaskTime, \" min\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 232\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Toaster, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 484,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 387,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"fXiaf3OuXCyYGtf0k+ZOfOUoLMA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","Button","Card","CardHeader","CardTitle","CardContent","TaskForm","TaskList","Toaster","toast","confetti","jsxDEV","_jsxDEV","motivationalQuotes","POINTS_PER_TASK","BONUS_POINTS_FACTOR","DEFAULT_BREAK_DURATION_MINUTES","App","_s","naggingQuote","setNaggingQuote","tasks","setTasks","spirals","setSpirals","currentTaskIndex","setCurrentTaskIndex","timeRemaining","setTimeRemaining","isTimerActive","setIsTimerActive","isBreakTime","setIsBreakTime","timerIntervalId","score","setScore","notificationSound","quoteIntervalId","getRandomQuote","Math","floor","random","length","current","Audio","Notification","permission","requestPermission","then","console","log","playNotificationSound","_notificationSound$cu","play","catch","error","showDesktopNotification","title","body","updateNaggingQuote","startNaggingQuoteInterval","setInterval","stopNaggingQuoteInterval","clearInterval","handleAddTask","newTaskData","prevTasks","id","Date","now","name","duration","estimatedDuration","completed","started","timeSpentSeconds","timerStartTime","completionTimestamp","description","handleRemoveTask","taskId","_tasks$currentTaskInd","taskToRemove","find","t","filter","task","variant","startTimer","taskIndex","_tasks$currentTaskInd2","taskToStart","map","idx","timeToSet","handlePauseTimer","handleResumeTimer","handleTaskDone","pointsEarnedThisTask","estimatedSeconds","secondsSaved","bonus","prevScore","particleCount","spread","origin","y","handleExtendTimer","extendMinutesText","prompt","extendMinutes","parseInt","isNaN","prev","prevTime","formatTime","totalSeconds","minutes","seconds","String","padStart","timerDisplayColor","totalTaskSeconds","percentageRemaining","calculateDailyStats","totalDuration","reduce","acc","activeTaskTime","unstartedTasksDuration","remainingSeconds","totalPlannedTime","remainingTaskTime","ceil","probNotFinishing","dailyStats","activeTaskObject","currentDisplayTaskName","handleAddSpiral","spiralName","trim","handleRemoveSpiral","spiralId","spiralToRemove","s","handleMoveSpiralToTasks","spiralToMove","durationText","className","children","fileName","_jsxFileName","lineNumber","columnNumber","size","disabled","onAddTask","onRemoveTask","onStartTask","currentTasks","findIndex","currentTasksLength","currentTasksIds","_c","$RefreshReg$"],"sources":["/home/poodle/Work/TimeBoxing/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { Button } from './components/ui/Button';\nimport { Card, CardHeader, CardTitle, CardContent } from './components/ui/Card';\nimport TaskForm from './components/TaskForm';\nimport TaskList from './components/TaskList';\nimport { Toaster } from './components/Toaster';\nimport { toast } from './hooks/use-toast';\nimport confetti from 'canvas-confetti';\n// Spirals components will be added later\n\nconst motivationalQuotes = [\n  \"You won\\'t be able to do it... Prove me wrong!\",\n  \"Don\\'t disappoint future you.\",\n  \"Less scrolling, more doing!\",\n  \"That task isn\\'t going to complete itself.\",\n  \"Are you a talker or a doer?\",\n  \"Time is ticking. Are you?\",\n  \"Stop procrastinating. Start dominating.\",\n  \"Is this the best use of your time right now?\",\n  \"The clock is your boss. Don\\'t get fired.\"\n];\n\nconst POINTS_PER_TASK = 10;\nconst BONUS_POINTS_FACTOR = 0.5; // points per second saved\nconst DEFAULT_BREAK_DURATION_MINUTES = 5;\n\nfunction App() {\n  const [naggingQuote, setNaggingQuote] = useState(\"\");\n  const [tasks, setTasks] = useState([]);\n  const [spirals, setSpirals] = useState([]); // For spirals feature\n  \n  const [currentTaskIndex, setCurrentTaskIndex] = useState(-1); // Index of the active task in the tasks array\n  const [timeRemaining, setTimeRemaining] = useState(0); // In seconds\n  const [isTimerActive, setIsTimerActive] = useState(false); // Is the countdown interval running?\n  const [isBreakTime, setIsBreakTime] = useState(false);\n  const timerIntervalId = useRef(null); // Using useRef to hold interval ID to avoid re-renders causing issues\n  \n  const [score, setScore] = useState(0);\n  const notificationSound = useRef(null);\n  const quoteIntervalId = useRef(null);\n\n  // Initialize nagging quote, sound, and notification permissions\n  useEffect(() => {\n    const getRandomQuote = () => motivationalQuotes[Math.floor(Math.random() * motivationalQuotes.length)];\n    setNaggingQuote(getRandomQuote());\n    notificationSound.current = new Audio('/assets/notification.mp3');\n\n    if (Notification.permission !== \"granted\" && Notification.permission !== \"denied\") {\n      Notification.requestPermission().then(permission => {\n        if (permission === \"granted\") console.log(\"Desktop notification permission granted.\");\n      });\n    }\n  }, []);\n\n  const playNotificationSound = useCallback(() => {\n    notificationSound.current?.play().catch(error => console.error(\"Error playing sound:\", error));\n  }, []);\n\n  const showDesktopNotification = useCallback((title, body) => {\n    if (Notification.permission === \"granted\") new Notification(title, { body });\n  }, []);\n\n  // Nagging quote logic\n  const updateNaggingQuote = useCallback(() => {\n    const getRandomQuote = () => motivationalQuotes[Math.floor(Math.random() * motivationalQuotes.length)];\n    setNaggingQuote(getRandomQuote());\n  }, [])\n\n  const startNaggingQuoteInterval = useCallback(() => {\n    if (!isTimerActive && !quoteIntervalId.current) {\n      updateNaggingQuote();\n      quoteIntervalId.current = setInterval(updateNaggingQuote, 30000);\n    }\n  }, [isTimerActive, updateNaggingQuote]);\n\n  const stopNaggingQuoteInterval = useCallback(() => {\n    if (quoteIntervalId.current) {\n      clearInterval(quoteIntervalId.current);\n      quoteIntervalId.current = null;\n    }\n  }, []);\n\n  useEffect(() => {\n    if (isTimerActive) {\n      stopNaggingQuoteInterval();\n    } else {\n      startNaggingQuoteInterval();\n    }\n    return () => stopNaggingQuoteInterval(); // Cleanup on unmount\n  }, [isTimerActive, startNaggingQuoteInterval, stopNaggingQuoteInterval]);\n\n\n  // Task Management\n  const handleAddTask = useCallback((newTaskData) => {\n    setTasks(prevTasks => [\n      ...prevTasks,\n      {\n        id: Date.now(),\n        name: newTaskData.name,\n        duration: newTaskData.duration, // user input in minutes\n        estimatedDuration: newTaskData.duration,\n        completed: false,\n        started: false,\n        timeSpentSeconds: 0,\n        timerStartTime: null,\n        completionTimestamp: null,\n      }\n    ]);\n    toast({ title: \"Task Added\", description: `\"${newTaskData.name}\" added to your list.` });\n  }, []);\n\n  const handleRemoveTask = useCallback((taskId) => {\n    const taskToRemove = tasks.find(t => t.id === taskId);\n    setTasks(prevTasks => prevTasks.filter(task => task.id !== taskId));\n    if (taskToRemove) {\n      toast({ title: \"Task Removed\", description: `\"${taskToRemove.name}\" has been removed.`, variant: \"destructive\" });\n    }\n    if (currentTaskIndex !== -1 && tasks[currentTaskIndex]?.id === taskId) {\n      if (timerIntervalId.current) clearInterval(timerIntervalId.current);\n      timerIntervalId.current = null;\n      setCurrentTaskIndex(-1);\n      setTimeRemaining(0);\n      setIsTimerActive(false);\n      setIsBreakTime(false);\n    }\n  }, [tasks, currentTaskIndex]);\n\n  // Timer Core Logic: Start, Pause, Resume, Done, Extend\n  const startTimer = useCallback((taskIndex) => {\n    // Guard 1: Basic validity and completion check\n    if (taskIndex < 0 || taskIndex >= tasks.length || !tasks[taskIndex]) {\n      toast({ title: \"Invalid Task\", description: \"Task not found or index is out of bounds.\", variant: \"destructive\" });\n      return;\n    }\n    if (tasks[taskIndex].completed) {\n      toast({ title: \"Task Completed\", description: `\"${tasks[taskIndex].name}\" is already completed.`, variant: \"default\" });\n      return;\n    }\n\n    // Guard 2: Check if another task is active or this specific one\n    if (isTimerActive && !isBreakTime && currentTaskIndex === taskIndex) {\n      toast({ title: \"Already Active\", description: `\"${tasks[taskIndex].name}\" is already running.`, variant: \"default\" });\n      return;\n    }\n    if (isTimerActive && !isBreakTime && currentTaskIndex !== -1 && currentTaskIndex !== taskIndex) { \n      toast({ title: \"Timer Busy\", description: `\"${tasks[currentTaskIndex]?.name || 'Another task'}\" is in progress. Complete or stop it first.`, variant: \"destructive\" });\n      return;\n    }\n    \n    // Guard 3: Handle active break\n    if (isBreakTime) { \n      if (timerIntervalId.current) clearInterval(timerIntervalId.current);\n      timerIntervalId.current = null;\n      setIsBreakTime(false); // Stop the break\n      toast({ title: \"Break Interrupted\", description: \"Starting a new task.\" });\n    }\n\n    const taskToStart = tasks[taskIndex];\n\n    // This extra check is for absolute safety, though guards above should cover it.\n    if (!taskToStart || typeof taskToStart.duration === 'undefined') {\n        console.error(\"Critical error: taskToStart is invalid despite guards. taskIndex:\", taskIndex, \"task:\", taskToStart);\n        toast({ title: \"Task Data Error\", description: \"Cannot start task due to incomplete data. Please check console.\", variant: \"destructive\" });\n        return;\n    }\n    \n    setTasks(prevTasks =>\n      prevTasks.map((task, idx) =>\n        idx === taskIndex ? { ...task, started: true, timerStartTime: Date.now(), timeSpentSeconds: task.timeSpentSeconds || 0 } : task\n      )\n    );\n    setCurrentTaskIndex(taskIndex);\n    // If task was partially worked on, resume from remaining, else from full duration\n    const timeToSet = (taskToStart.duration * 60) - (taskToStart.timeSpentSeconds || 0);\n    setTimeRemaining(timeToSet > 0 ? timeToSet : taskToStart.duration * 60); // Ensure it doesn't start negative\n    setIsTimerActive(true);\n    setIsBreakTime(false); // Ensure break mode is off\n    toast({ title: \"Task Started\", description: `Timer for \"${taskToStart.name}\" has begun.` });\n  }, [tasks, isTimerActive, isBreakTime, currentTaskIndex]);\n\n  const handlePauseTimer = useCallback(() => {\n    if (timerIntervalId.current) {\n      clearInterval(timerIntervalId.current);\n      timerIntervalId.current = null;\n      // Note: isTimerActive remains true to indicate a resumable state, interval is just cleared.\n      toast({ title: \"Timer Paused\" });\n    }\n  }, []);\n\n  const handleResumeTimer = useCallback(() => {\n    if (isTimerActive && !timerIntervalId.current && timeRemaining > 0) {\n       // The useEffect for countdown will pick this up because isTimerActive is true and intervalId is null\n      toast({ title: \"Timer Resumed\" });\n    } else if (!isTimerActive && currentTaskIndex !== -1 && !isBreakTime && tasks[currentTaskIndex] && !tasks[currentTaskIndex].completed && timeRemaining > 0) {\n      // This case is if timer was fully stopped (e.g. by done) but we want to resume a task that wasn't finished\n      // For now, startTimer handles this if the user clicks start on task list\n      // Or main start button could call this.\n      setIsTimerActive(true); // Trigger the interval\n    }\n  }, [isTimerActive, timeRemaining, currentTaskIndex, tasks, isBreakTime]);\n\n  const handleTaskDone = useCallback(() => {\n    if (currentTaskIndex === -1 || !tasks[currentTaskIndex] || tasks[currentTaskIndex].completed) return;\n\n    const task = tasks[currentTaskIndex];\n    let pointsEarnedThisTask = POINTS_PER_TASK;\n    const estimatedSeconds = task.estimatedDuration * 60;\n    if (task.timeSpentSeconds < estimatedSeconds) {\n      const secondsSaved = estimatedSeconds - task.timeSpentSeconds;\n      const bonus = Math.floor(secondsSaved * BONUS_POINTS_FACTOR);\n      pointsEarnedThisTask += bonus;\n    }\n    setScore(prevScore => prevScore + pointsEarnedThisTask);\n    confetti({ particleCount: 150, spread: 100, origin: { y: 0.6 } });\n\n    setTasks(prevTasks => prevTasks.map((t, idx) =>\n      idx === currentTaskIndex ? { ...t, completed: true, duration: t.timeSpentSeconds / 60, completionTimestamp: Date.now() } : t\n    ));\n\n    if (timerIntervalId.current) clearInterval(timerIntervalId.current);\n    timerIntervalId.current = null;\n    setIsTimerActive(false); // Fully stop timer activity for this task\n    \n    playNotificationSound();\n    showDesktopNotification(\"Task Finished!\", `\"${task.name}\" is complete.`);\n    toast({ title: \"Task Finished!\", description: `\"${task.name}\" complete. Points: +${pointsEarnedThisTask}` });\n    // Show score popup will be a dialog or animated div - for later\n    \n    // Start a break\n    setIsBreakTime(true);\n    setTimeRemaining(DEFAULT_BREAK_DURATION_MINUTES * 60);\n    setIsTimerActive(true); // Start break timer countdown via useEffect\n    setCurrentTaskIndex(-1); // No task is active during break\n    toast({title: \"Break Time!\", description: `Taking a ${DEFAULT_BREAK_DURATION_MINUTES} minute break.`});\n\n  }, [tasks, currentTaskIndex, playNotificationSound, showDesktopNotification]);\n\n  const handleExtendTimer = useCallback(() => {\n    const extendMinutesText = prompt(\"Extend by how many minutes?\", \"5\");\n    if (extendMinutesText === null) return; // User cancelled\n    const extendMinutes = parseInt(extendMinutesText, 10);\n\n    if (!isNaN(extendMinutes) && extendMinutes > 0) {\n      setTimeRemaining(prev => prev + extendMinutes * 60);\n      if (currentTaskIndex !== -1 && !isBreakTime) {\n        setTasks(prevTasks => prevTasks.map((t, idx) =>\n          idx === currentTaskIndex ? { ...t, duration: t.duration + extendMinutes } : t\n        ));\n      }\n      // If timer was paused (no intervalId) but now has time, and was active, it will resume via useEffect\n      // If timer wasn't active but now has time, user needs to click resume/start.\n      // We can make it auto-resume if it was paused:\n      if (isTimerActive && !timerIntervalId.current && (timeRemaining + extendMinutes * 60) > 0){\n        // The useEffect will pick this up to start a new interval if isTimerActive is true\n      }\n      toast({ title: \"Timer Extended\", description: `Added ${extendMinutes} minutes.` });\n    } else {\n      toast({ title: \"Invalid Input\", description: \"Please enter a valid number of minutes.\", variant: \"destructive\" });\n    }\n  }, [currentTaskIndex, isBreakTime, isTimerActive, timeRemaining]);\n\n  // Effect for Timer Countdown\n  useEffect(() => {\n    if (isTimerActive && !timerIntervalId.current && timeRemaining > 0) {\n      timerIntervalId.current = setInterval(() => {\n        setTimeRemaining(prevTime => {\n          if (prevTime <= 1) { // Reaches 0 on next tick\n            clearInterval(timerIntervalId.current);\n            timerIntervalId.current = null;\n            // isTimerActive remains true until user acts or break auto-ends\n            \n            if (isBreakTime) {\n              playNotificationSound();\n              showDesktopNotification(\"Break Over!\", \"Your break time is up.\");\n              toast({ title: \"Break Finished!\", description: \"Ready for the next task?\" });\n              setIsBreakTime(false);\n              setIsTimerActive(false); // Fully stop timer\n              setCurrentTaskIndex(-1);\n            } else if (currentTaskIndex !== -1) {\n              const task = tasks[currentTaskIndex];\n              playNotificationSound();\n              showDesktopNotification(\"Time's Up!\", `Time for \"${task.name}\" is up.`);\n              toast({ title: \"Time's Up!\", description: `\"${task.name}\" timer finished. Mark done or extend.` });\n              // isTimerActive remains true to allow extend/done\n            }\n            return 0;\n          }\n          // Increment timeSpentSeconds for active task\n          if (currentTaskIndex !== -1 && !isBreakTime) {\n            setTasks(prevTasks => prevTasks.map((task, idx) => \n                idx === currentTaskIndex ? {...task, timeSpentSeconds: task.timeSpentSeconds + 1} : task\n            ));\n          }\n          return prevTime - 1;\n        });\n      }, 1000);\n    } else if ((!isTimerActive || timeRemaining === 0) && timerIntervalId.current) {\n      // This condition handles explicit pause or if time ran out and another action cleared isTimerActive\n      clearInterval(timerIntervalId.current);\n      timerIntervalId.current = null;\n    }\n    // Cleanup function\n    return () => {\n      if (timerIntervalId.current) {\n        clearInterval(timerIntervalId.current);\n        timerIntervalId.current = null; // Ensure it's clear for next effect run\n      }\n    };\n  }, [isTimerActive, timeRemaining, tasks, currentTaskIndex, isBreakTime, playNotificationSound, showDesktopNotification]);\n\n  // Formatting and Display Logic\n  const formatTime = (totalSeconds) => {\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;\n  };\n\n  const timerDisplayColor = () => {\n    if (isBreakTime || currentTaskIndex === -1 || !tasks[currentTaskIndex] || tasks[currentTaskIndex].completed) return 'text-timerAccent';\n    const task = tasks[currentTaskIndex];\n    const totalTaskSeconds = task.estimatedDuration * 60;\n    if (totalTaskSeconds === 0) return 'text-timerAccent';\n    const percentageRemaining = (timeRemaining / totalTaskSeconds) * 100;\n    if (percentageRemaining <= 20) return 'text-red-500';\n    if (percentageRemaining <= 50) return 'text-yellow-500';\n    return 'text-timerAccent';\n  };\n\n  const calculateDailyStats = useCallback(() => {\n    const totalDuration = tasks.reduce((acc, task) => acc + task.estimatedDuration, 0);\n    let activeTaskTime = 0;\n    if (currentTaskIndex !== -1 && tasks[currentTaskIndex] && !tasks[currentTaskIndex].completed && !isBreakTime) {\n        activeTaskTime = timeRemaining > 0 ? timeRemaining : 0; // if timer is up, count 0 unless extended\n    }\n    const unstartedTasksDuration = tasks\n        .filter(task => !task.started && !task.completed)\n        .reduce((acc, task) => acc + (task.estimatedDuration * 60), 0);\n    const remainingSeconds = activeTaskTime + unstartedTasksDuration;\n    // Probability calculation can be refined later\n    return {\n      totalPlannedTime: totalDuration,\n      remainingTaskTime: Math.ceil(remainingSeconds / 60),\n      probNotFinishing: 0, // Placeholder\n    };\n  }, [tasks, currentTaskIndex, timeRemaining, isBreakTime]);\n\n  const dailyStats = calculateDailyStats();\n  const activeTaskObject = currentTaskIndex !== -1 && tasks[currentTaskIndex] ? tasks[currentTaskIndex] : null;\n  const currentDisplayTaskName = isBreakTime ? \"Break Time!\" : (activeTaskObject ? activeTaskObject.name : \"None\");\n\n  // Spirals handlers (to be implemented)\n  const handleAddSpiral = useCallback((spiralName) => {\n    if (!spiralName.trim()) {\n        toast({title: \"Invalid Spiral\", description: \"Spiral name cannot be empty.\", variant: \"destructive\"});\n        return;\n    }\n    setSpirals(prev => [...prev, { id: Date.now(), name: spiralName.trim() }]);\n    toast({title: \"Spiral Added\", description: `\"${spiralName.trim()}\" added to spirals.`});\n  }, []);\n\n  const handleRemoveSpiral = useCallback((spiralId) => {\n    const spiralToRemove = spirals.find(s => s.id === spiralId);\n    setSpirals(prev => prev.filter(s => s.id !== spiralId));\n    if (spiralToRemove) {\n        toast({title: \"Spiral Removed\", description: `\"${spiralToRemove.name}\" removed.`, variant: \"destructive\"});\n    }\n  }, [spirals]);\n\n  const handleMoveSpiralToTasks = useCallback((spiralId) => {\n    const spiralToMove = spirals.find(s => s.id === spiralId);\n    if (!spiralToMove) return;\n\n    const durationText = prompt(`Enter estimated duration (minutes) for task \"${spiralToMove.name}\":`, \"30\");\n    if (durationText === null) return; // User cancelled\n    const duration = parseInt(durationText, 10);\n\n    if (duration && duration > 0) {\n      handleAddTask({ name: spiralToMove.name, duration });\n      setSpirals(prev => prev.filter(s => s.id !== spiralId));\n    } else {\n      toast({ title: \"Invalid Duration\", description: \"Please enter a positive number for duration.\", variant: \"destructive\" });\n    }\n  }, [spirals, handleAddTask]);\n\n  // JSX will be in the next part\n  return (\n    <div className=\"min-h-screen bg-dark text-lightText p-4 sm:p-6 md:p-8\">\n      <header className=\"bg-dark-100 p-6 rounded-lg shadow-lg mb-8 ring-1 ring-dark-300\">\n        <h1 className=\"text-4xl font-bold text-center text-cyanAccent\">Time Boxer</h1>\n        {naggingQuote && <p className=\"text-center text-subtleText italic mt-2\">{naggingQuote}</p>}\n      </header>\n\n      <main className=\"max-w-7xl mx-auto grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        <Card className=\"lg:col-span-3 bg-dark-100 ring-1 ring-dark-300\">\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"text-2xl font-semibold text-cyanAccent\">Current Task: {currentDisplayTaskName}</CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-center\">\n            <div id=\"timer-clock-react\" className={`text-8xl font-bold text-${timerDisplayColor()} my-4`}>\n              {formatTime(timeRemaining)}\n            </div>\n            <div className=\"space-x-2 mb-4\">\n              <Button variant=\"buttonBlue\" size=\"lg\" disabled={!tasks[currentTaskIndex] || !tasks[currentTaskIndex].started || isTimerActive}>Start/Resume</Button>\n              <Button variant=\"buttonGray\" size=\"lg\" disabled={!isTimerActive}>Pause</Button>\n              <Button variant=\"buttonGray\" size=\"lg\" disabled={!tasks[currentTaskIndex] || !tasks[currentTaskIndex].started } >Extend Time</Button>\n            </div>\n            <div>\n              <Button variant=\"buttonGreen\" size=\"lg\" className=\"w-full max-w-xs mx-auto\" disabled={!tasks[currentTaskIndex] || !tasks[currentTaskIndex].started}>Done!</Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"lg:col-span-1 bg-dark-100 ring-1 ring-dark-300\">\n          <CardHeader>\n            <CardTitle className=\"text-xl font-semibold text-cyanAccent\">Plan Your Day</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <TaskForm onAddTask={handleAddTask} />\n            <div className=\"mt-6 pt-6 border-t border-dark-300 space-y-2\">\n                <h3 className=\"text-md font-semibold text-cyanAccent mb-3\">Daily Stats</h3>\n                <p className=\"text-sm text-subtleText flex justify-between\">Total Planned: <span className='text-timerAccent font-semibold'>{dailyStats.totalPlannedTime} min</span></p>\n                <p className=\"text-sm text-subtleText flex justify-between\">Remaining: <span className='text-timerAccent font-semibold'>{dailyStats.remainingTaskTime} min</span></p>\n                <p className=\"text-sm text-subtleText flex justify-between\">P(Not Finishing): <span className='text-timerAccent font-semibold'>{dailyStats.probNotFinishing}%</span></p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"lg:col-span-2 bg-dark-100 ring-1 ring-dark-300\">\n          <CardHeader>\n            <CardTitle className=\"text-xl font-semibold text-cyanAccent\">Today's Tasks</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <TaskList \n                tasks={tasks} \n                onRemoveTask={handleRemoveTask} \n                onStartTask={(taskId) => {\n                    const currentTasks = tasks; // Capture for logging & consistent check\n                    const taskIndex = currentTasks.findIndex(t => t.id === taskId);\n                    \n                    console.log('[App onStartTask] Attempting to start task:', \n                        { taskId, taskIndex, currentTasksLength: currentTasks.length, \n                          currentTasksIds: currentTasks.map(t => t.id) });\n\n                    if (taskIndex !== -1) {\n                        // Pre-flight check using the same logic as startTimer's first guard\n                        if (taskIndex < 0 || taskIndex >= currentTasks.length || !currentTasks[taskIndex]) {\n                            console.error(\"[App onStartTask PRE-CHECK FAILED] taskIndex out of bounds for current tasks.\", \n                                { taskId, taskIndex, currentTasksLength: currentTasks.length });\n                            toast({ \n                                title: \"Task Sync Issue\", \n                                description: \"State inconsistency before starting timer. Please try again.\", \n                                variant: \"destructive\" \n                            });\n                            return;\n                        }\n                        startTimer(taskIndex);\n                    } else {\n                        console.error(\"[App onStartTask] Task ID not found in current tasks:\", { taskId });\n                        toast({ \n                            title: \"Task Not Found\", \n                            description: \"The selected task could not be found to start.\", \n                            variant: \"destructive\" \n                        });\n                    }\n                }}\n                currentTaskIndex={currentTaskIndex} // Pass the index\n            />\n          </CardContent>\n        </Card>\n\n        <Card className=\"lg:col-span-3 bg-dark-100 ring-1 ring-dark-300\">\n          <CardHeader>\n            <CardTitle className=\"text-xl font-semibold text-cyanAccent\">Spirals (For Later)</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-sm text-subtleText\">Spirals management coming soon...</p>\n          </CardContent>\n        </Card>\n      </main>\n\n      <footer className=\"bg-dark-100 text-subtleText p-6 rounded-lg shadow-lg mt-8 text-center ring-1 ring-dark-300\">\n        <p className=\"text-sm\">Score: <span className='text-timerAccent font-semibold'>{score}</span> | Tasks Completed: <span className='text-timerAccent font-semibold'>{tasks.filter(t => t.completed).length}</span> | Focus Time: <span className='text-timerAccent font-semibold'>{dailyStats.remainingTaskTime} min</span></p>\n      </footer>\n      <Toaster />\n    </div>\n  );\n}\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}