{"ast":null,"code":"var _jsxFileName = \"/home/poodle/Work/TimeBoxing/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { Button } from './components/ui/Button';\nimport { Card, CardHeader, CardTitle, CardContent } from './components/ui/Card';\nimport TaskForm from './components/TaskForm';\nimport TaskList from './components/TaskList';\nimport { Toaster } from './components/Toaster';\nimport { toast } from './hooks/use-toast';\nimport confetti from 'canvas-confetti';\nimport { PromptDialog } from './components/ui/PromptDialog';\nimport SpiralForm from './components/SpiralForm';\nimport SpiralList from './components/SpiralList';\n// Spirals components will be added later\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst motivationalQuotes = [\"You won\\'t be able to do it... Prove me wrong!\", \"Don\\'t disappoint future you.\", \"Less scrolling, more doing!\", \"That task isn\\'t going to complete itself.\", \"Are you a talker or a doer?\", \"Time is ticking. Are you?\", \"Stop procrastinating. Start dominating.\", \"Is this the best use of your time right now?\", \"The clock is your boss. Don\\'t get fired.\"];\nconst POINTS_PER_TASK = 10;\nconst BONUS_POINTS_FACTOR = 0.5; // points per second saved\nconst DEFAULT_BREAK_DURATION_MINUTES = 5;\nconst POINTS_DEDUCTION_FOR_EXTENSION = 2; // Penalty for extending a task\n\nfunction App() {\n  _s();\n  const [naggingQuote, setNaggingQuote] = useState(\"\");\n  const [tasks, setTasks] = useState([]);\n  const [spirals, setSpirals] = useState([]); // For spirals feature\n\n  const [currentTaskIndex, setCurrentTaskIndex] = useState(-1); // Index of the active task in the tasks array\n  const [timeRemaining, setTimeRemaining] = useState(0); // In seconds\n  const [isTimerActive, setIsTimerActive] = useState(false); // Is the countdown interval running?\n  const [isBreakTime, setIsBreakTime] = useState(false);\n  const timerIntervalId = useRef(null); // Using useRef to hold interval ID to avoid re-renders causing issues\n\n  const [score, setScore] = useState(0);\n  const notificationSound = useRef(null);\n  const quoteIntervalId = useRef(null);\n\n  // State for PromptDialog\n  const [isPromptOpen, setIsPromptOpen] = useState(false);\n  const [promptConfig, setPromptConfig] = useState({\n    title: '',\n    message: '',\n    inputLabel: '',\n    defaultValue: '',\n    confirmText: 'Confirm',\n    cancelText: 'Cancel',\n    onConfirm: () => {},\n    placeholder: ''\n  });\n\n  // Initialize nagging quote, sound, and notification permissions\n  useEffect(() => {\n    const getRandomQuote = () => motivationalQuotes[Math.floor(Math.random() * motivationalQuotes.length)];\n    setNaggingQuote(getRandomQuote());\n    notificationSound.current = new Audio('/assets/notification.mp3');\n    if (Notification.permission !== \"granted\" && Notification.permission !== \"denied\") {\n      Notification.requestPermission().then(permission => {\n        if (permission === \"granted\") console.log(\"Desktop notification permission granted.\");\n      });\n    }\n  }, []);\n  const playNotificationSound = useCallback(() => {\n    var _notificationSound$cu;\n    (_notificationSound$cu = notificationSound.current) === null || _notificationSound$cu === void 0 ? void 0 : _notificationSound$cu.play().catch(error => console.error(\"Error playing sound:\", error));\n  }, []);\n  const showDesktopNotification = useCallback((title, body) => {\n    if (Notification.permission === \"granted\") new Notification(title, {\n      body\n    });\n  }, []);\n\n  // Nagging quote logic\n  const updateNaggingQuote = useCallback(() => {\n    const getRandomQuote = () => motivationalQuotes[Math.floor(Math.random() * motivationalQuotes.length)];\n    setNaggingQuote(getRandomQuote());\n  }, []);\n  const startNaggingQuoteInterval = useCallback(() => {\n    if (!isTimerActive && !quoteIntervalId.current) {\n      updateNaggingQuote();\n      quoteIntervalId.current = setInterval(updateNaggingQuote, 30000);\n    }\n  }, [isTimerActive, updateNaggingQuote]);\n  const stopNaggingQuoteInterval = useCallback(() => {\n    if (quoteIntervalId.current) {\n      clearInterval(quoteIntervalId.current);\n      quoteIntervalId.current = null;\n    }\n  }, []);\n  useEffect(() => {\n    if (isTimerActive) {\n      stopNaggingQuoteInterval();\n    } else {\n      startNaggingQuoteInterval();\n    }\n    return () => stopNaggingQuoteInterval(); // Cleanup on unmount\n  }, [isTimerActive, startNaggingQuoteInterval, stopNaggingQuoteInterval]);\n\n  // Task Management\n  const handleAddTask = useCallback(newTaskData => {\n    setTasks(prevTasks => [...prevTasks, {\n      id: Date.now(),\n      name: newTaskData.name,\n      duration: newTaskData.duration,\n      // user input in minutes\n      estimatedDuration: newTaskData.duration,\n      completed: false,\n      started: false,\n      timeSpentSeconds: 0,\n      timerStartTime: null,\n      completionTimestamp: null\n    }]);\n    toast({\n      title: \"Task Added\",\n      description: `\"${newTaskData.name}\" added to your list.`\n    });\n  }, []);\n  const handleRemoveTask = useCallback(taskId => {\n    var _tasks$currentTaskInd;\n    const taskToRemove = tasks.find(t => t.id === taskId);\n    setTasks(prevTasks => prevTasks.filter(task => task.id !== taskId));\n    if (taskToRemove) {\n      toast({\n        title: \"Task Removed\",\n        description: `\"${taskToRemove.name}\" has been removed.`,\n        variant: \"destructive\"\n      });\n    }\n    if (currentTaskIndex !== -1 && ((_tasks$currentTaskInd = tasks[currentTaskIndex]) === null || _tasks$currentTaskInd === void 0 ? void 0 : _tasks$currentTaskInd.id) === taskId) {\n      if (timerIntervalId.current) clearInterval(timerIntervalId.current);\n      timerIntervalId.current = null;\n      setCurrentTaskIndex(-1);\n      setTimeRemaining(0);\n      setIsTimerActive(false);\n      setIsBreakTime(false);\n    }\n  }, [tasks, currentTaskIndex]);\n\n  // Timer Core Logic: Start, Pause, Resume, Done, Extend\n  const startTimer = useCallback(taskIndex => {\n    // Guard 1: Basic validity and completion check\n    if (taskIndex < 0 || taskIndex >= tasks.length || !tasks[taskIndex]) {\n      toast({\n        title: \"Invalid Task\",\n        description: \"Task not found or index is out of bounds.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    if (tasks[taskIndex].completed) {\n      toast({\n        title: \"Task Completed\",\n        description: `\"${tasks[taskIndex].name}\" is already completed.`,\n        variant: \"default\"\n      });\n      return;\n    }\n\n    // Guard 2: Check if another task is active or this specific one\n    if (isTimerActive && !isBreakTime && currentTaskIndex === taskIndex) {\n      toast({\n        title: \"Already Active\",\n        description: `\"${tasks[taskIndex].name}\" is already running.`,\n        variant: \"default\"\n      });\n      return;\n    }\n    if (isTimerActive && !isBreakTime && currentTaskIndex !== -1 && currentTaskIndex !== taskIndex) {\n      var _tasks$currentTaskInd2;\n      toast({\n        title: \"Timer Busy\",\n        description: `\"${((_tasks$currentTaskInd2 = tasks[currentTaskIndex]) === null || _tasks$currentTaskInd2 === void 0 ? void 0 : _tasks$currentTaskInd2.name) || 'Another task'}\" is in progress. Complete or stop it first.`,\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Guard 3: Handle active break\n    if (isBreakTime) {\n      if (timerIntervalId.current) clearInterval(timerIntervalId.current);\n      timerIntervalId.current = null;\n      setIsBreakTime(false); // Stop the break\n      toast({\n        title: \"Break Interrupted\",\n        description: \"Starting a new task.\"\n      });\n    }\n    const taskToStart = tasks[taskIndex];\n\n    // This extra check is for absolute safety, though guards above should cover it.\n    if (!taskToStart || typeof taskToStart.duration === 'undefined') {\n      console.error(\"Critical error: taskToStart is invalid despite guards. taskIndex:\", taskIndex, \"task:\", taskToStart);\n      toast({\n        title: \"Task Data Error\",\n        description: \"Cannot start task due to incomplete data. Please check console.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    setTasks(prevTasks => prevTasks.map((task, idx) => idx === taskIndex ? {\n      ...task,\n      started: true,\n      timerStartTime: Date.now(),\n      timeSpentSeconds: task.timeSpentSeconds || 0\n    } : task));\n    setCurrentTaskIndex(taskIndex);\n    // If task was partially worked on, resume from remaining, else from full duration\n    const timeToSet = taskToStart.duration * 60 - (taskToStart.timeSpentSeconds || 0);\n    setTimeRemaining(timeToSet > 0 ? timeToSet : taskToStart.duration * 60); // Ensure it doesn't start negative\n    setIsTimerActive(true);\n    setIsBreakTime(false); // Ensure break mode is off\n    toast({\n      title: \"Task Started\",\n      description: `Timer for \"${taskToStart.name}\" has begun.`\n    });\n  }, [tasks, isTimerActive, isBreakTime, currentTaskIndex]);\n  const handlePauseTimer = useCallback(() => {\n    if (timerIntervalId.current) {\n      // If interval exists, it means it was active\n      clearInterval(timerIntervalId.current);\n      timerIntervalId.current = null;\n      setIsTimerActive(false); // Timer is no longer actively ticking\n      toast({\n        title: isBreakTime ? \"Break Paused\" : \"Timer Paused\"\n      });\n    }\n  }, [isBreakTime]); // setIsTimerActive is stable and doesn't need to be a dependency\n\n  const handleResumeTimer = useCallback(() => {\n    // Conditions to resume: must not be already set to active, must have time, and a context (task or break)\n    if (!isTimerActive && timeRemaining > 0 && (currentTaskIndex !== -1 && tasks[currentTaskIndex] && !tasks[currentTaskIndex].completed && !isBreakTime || isBreakTime)) {\n      setIsTimerActive(true); // Signal the useEffect to start the interval\n      toast({\n        title: isBreakTime ? \"Break Resumed\" : \"Timer Resumed\"\n      });\n    }\n  }, [isTimerActive, timeRemaining, currentTaskIndex, tasks, isBreakTime]); // tasks is needed for tasks[currentTaskIndex]\n\n  const handleTaskDone = useCallback(() => {\n    if (currentTaskIndex === -1 || !tasks[currentTaskIndex] || tasks[currentTaskIndex].completed) {\n      toast({\n        title: \"No Active Task\",\n        description: \"No task to mark as done.\",\n        variant: \"default\"\n      });\n      return;\n    }\n    const task = tasks[currentTaskIndex];\n    let pointsEarnedThisTask = POINTS_PER_TASK;\n    // Calculate timeSpent more accurately based on when 'Done' is clicked relative to timer\n    const timeWhenDone = task.timerStartTime ? (Date.now() - task.timerStartTime) / 1000 : task.timeSpentSeconds;\n    const actualTimeSpent = timeWhenDone < task.duration * 60 ? timeWhenDone : task.duration * 60; // Cap at original duration for bonus calc\n\n    const estimatedSeconds = task.estimatedDuration * 60;\n    if (actualTimeSpent < estimatedSeconds) {\n      const secondsSaved = estimatedSeconds - actualTimeSpent;\n      const bonus = Math.floor(secondsSaved * BONUS_POINTS_FACTOR);\n      pointsEarnedThisTask += bonus;\n    }\n    setScore(prevScore => prevScore + pointsEarnedThisTask);\n    confetti({\n      particleCount: 150,\n      spread: 100,\n      origin: {\n        y: 0.6\n      }\n    });\n    setTasks(prevTasks => prevTasks.map((t, idx) => idx === currentTaskIndex ? {\n      ...t,\n      completed: true,\n      timeSpentSeconds: actualTimeSpent,\n      // Update with more precise time\n      duration: actualTimeSpent / 60,\n      // Reflect actual time in duration field for display/stats if needed\n      completionTimestamp: Date.now()\n    } : t));\n    if (timerIntervalId.current) {\n      clearInterval(timerIntervalId.current);\n      timerIntervalId.current = null;\n    }\n    setIsTimerActive(false); // Task timer is now definitively stopped.\n\n    playNotificationSound();\n    showDesktopNotification(\"Task Finished!\", `\"${task.name}\" is complete.`);\n    toast({\n      title: \"Task Finished!\",\n      description: `\"${task.name}\" complete. Points: +${pointsEarnedThisTask}`\n    });\n\n    // Start a break automatically\n    setIsBreakTime(true);\n    setTimeRemaining(DEFAULT_BREAK_DURATION_MINUTES * 60);\n    setCurrentTaskIndex(-1); // No task is active during break\n    setIsTimerActive(true); // Signal useEffect to start the break timer\n    toast({\n      title: \"Break Time!\",\n      description: `Taking a ${DEFAULT_BREAK_DURATION_MINUTES} minute break.`\n    });\n  }, [tasks, currentTaskIndex, playNotificationSound, showDesktopNotification, POINTS_PER_TASK, BONUS_POINTS_FACTOR, DEFAULT_BREAK_DURATION_MINUTES]); // Removed timeRemaining as it caused stale closures for actualTimeSpent\n\n  const handleSkipBreak = useCallback(() => {\n    if (isBreakTime && isTimerActive) {\n      if (timerIntervalId.current) {\n        clearInterval(timerIntervalId.current);\n        timerIntervalId.current = null;\n      }\n      setIsTimerActive(false);\n      setIsBreakTime(false);\n      setTimeRemaining(0);\n      setCurrentTaskIndex(-1);\n      toast({\n        title: \"Break Skipped\",\n        description: \"Break ended. Ready for the next task?\"\n      });\n    } else {\n      toast({\n        title: \"No Active Break\",\n        description: \"There is no active break to skip.\",\n        variant: \"default\"\n      });\n    }\n  }, [isBreakTime, isTimerActive]); // Include all dependencies\n\n  const handleExtendTimer = useCallback(() => {\n    // Condition 1: No timer active at all (neither task nor break has been started)\n    if (currentTaskIndex === -1 && !isBreakTime) {\n      toast({\n        title: \"No Timer Active\",\n        description: \"Start a task or break to extend its time.\",\n        variant: \"default\"\n      });\n      return;\n    }\n\n    // Condition 2: Time still remaining on the clock (not 0)\n    if (timeRemaining > 0) {\n      toast({\n        title: \"Timer Still Running\",\n        description: \"Time can only be extended when the timer reaches 0.\",\n        variant: \"default\"\n      });\n      return;\n    }\n\n    // Condition 3: If it's a task, it must not be completed\n    if (!isBreakTime && tasks[currentTaskIndex] && tasks[currentTaskIndex].completed) {\n      toast({\n        title: \"Task Completed\",\n        description: `Task \"${tasks[currentTaskIndex].name}\" is already completed and cannot be extended.`,\n        variant: \"default\"\n      });\n      return;\n    }\n    const context = isBreakTime ? \"break\" : tasks[currentTaskIndex] ? `task \"${tasks[currentTaskIndex].name}\"` : \"task\";\n    const defaultExtension = \"5\";\n    setPromptConfig({\n      title: `Extend ${context}`,\n      message: `How many minutes would you like to add to the ${context}? Timer is currently at 00:00.`,\n      inputLabel: 'Minutes to add:',\n      defaultValue: defaultExtension,\n      confirmText: 'Extend',\n      cancelText: 'Cancel',\n      placeholder: 'Enter minutes',\n      onConfirm: extendMinutesText => {\n        const extendMinutes = parseInt(extendMinutesText, 10);\n        if (!isNaN(extendMinutes) && extendMinutes > 0) {\n          const newTimeRemaining = timeRemaining + extendMinutes * 60; // timeRemaining will be 0 here\n          setTimeRemaining(newTimeRemaining);\n          let toastDescription = `Added ${extendMinutes} minutes to ${context}.`;\n          if (currentTaskIndex !== -1 && !isBreakTime && tasks[currentTaskIndex]) {\n            setTasks(prevTasks => prevTasks.map((t, idx) => idx === currentTaskIndex ? {\n              ...t,\n              duration: t.duration + extendMinutes,\n              estimatedDuration: t.estimatedDuration + extendMinutes\n            } : t));\n            // Deduct points for task extension\n            setScore(prevScore => prevScore - POINTS_DEDUCTION_FOR_EXTENSION);\n            toastDescription += ` Points: -${POINTS_DEDUCTION_FOR_EXTENSION}`;\n          }\n\n          // If the timer was not active (which it will be, as timeRemaining was 0) and now has time, reactivate it.\n          if (!isTimerActive && newTimeRemaining > 0) {\n            setIsTimerActive(true);\n          }\n          toast({\n            title: \"Timer Extended\",\n            description: toastDescription\n          });\n        } else {\n          toast({\n            title: \"Invalid Input\",\n            description: \"Please enter a valid number of minutes.\",\n            variant: \"destructive\"\n          });\n        }\n      }\n    });\n    setIsPromptOpen(true);\n  }, [currentTaskIndex, isBreakTime, isTimerActive, timeRemaining, tasks, setTasks, score]); // Added score to dependencies\n\n  // Effect for Timer Countdown\n  useEffect(() => {\n    if (isTimerActive && timeRemaining > 0) {\n      // If timer should be active and there's time, start the interval\n      timerIntervalId.current = setInterval(() => {\n        setTimeRemaining(prevTime => {\n          if (prevTime <= 1) {\n            // Stop the interval first\n            if (timerIntervalId.current) clearInterval(timerIntervalId.current);\n            timerIntervalId.current = null;\n            setIsTimerActive(false); // Timer is no longer active\n\n            if (isBreakTime) {\n              playNotificationSound();\n              showDesktopNotification(\"Break Over!\", \"Your break time is up.\");\n              toast({\n                title: \"Break Finished!\",\n                description: \"Ready for the next task?\"\n              });\n              setIsBreakTime(false); // Break is over\n              setCurrentTaskIndex(-1); // No active task\n            } else if (currentTaskIndex !== -1 && tasks[currentTaskIndex]) {\n              const task = tasks[currentTaskIndex];\n              // Increment timeSpentSeconds one last time for the final second\n              setTasks(prevTasks => prevTasks.map((t, idx) => idx === currentTaskIndex ? {\n                ...t,\n                timeSpentSeconds: (t.timeSpentSeconds || 0) + 1\n              } : t));\n              playNotificationSound();\n              showDesktopNotification(\"Time's Up!\", `Time for \"${task.name}\" is up.`);\n              toast({\n                title: \"Time's Up!\",\n                description: `\"${task.name}\" timer finished. Mark done or extend.`\n              });\n              // User needs to manually mark done or extend. isTimerActive is false.\n            }\n            return 0; // Time is up\n          }\n\n          // Increment timeSpentSeconds for active task during normal countdown\n          if (currentTaskIndex !== -1 && !isBreakTime && tasks[currentTaskIndex]) {\n            setTasks(prevTasks => prevTasks.map((task, idx) => idx === currentTaskIndex ? {\n              ...task,\n              timeSpentSeconds: (task.timeSpentSeconds || 0) + 1\n            } : task));\n          }\n          return prevTime - 1; // Countdown\n        });\n      }, 1000);\n    } else {\n      // If timer shouldn't be active or time is up, ensure interval is cleared\n      if (timerIntervalId.current) {\n        clearInterval(timerIntervalId.current);\n        timerIntervalId.current = null;\n      }\n    }\n    // Cleanup function: always clear interval when dependencies change or component unmounts\n    return () => {\n      if (timerIntervalId.current) {\n        clearInterval(timerIntervalId.current);\n        timerIntervalId.current = null;\n      }\n    };\n  }, [isTimerActive, timeRemaining, tasks, currentTaskIndex, isBreakTime, playNotificationSound, showDesktopNotification, setTasks]); // Added setTasks\n\n  // Formatting and Display Logic\n  const formatTime = totalSeconds => {\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;\n  };\n  const timerDisplayColor = () => {\n    if (isBreakTime || currentTaskIndex === -1 || !tasks[currentTaskIndex] || tasks[currentTaskIndex].completed) return 'text-timerAccent';\n    const task = tasks[currentTaskIndex];\n    const totalTaskSeconds = task.estimatedDuration * 60;\n    if (totalTaskSeconds === 0) return 'text-timerAccent';\n    const percentageRemaining = timeRemaining / totalTaskSeconds * 100;\n    if (percentageRemaining <= 20) return 'text-red-500';\n    if (percentageRemaining <= 50) return 'text-yellow-500';\n    return 'text-timerAccent';\n  };\n  const calculateDailyStats = useCallback(() => {\n    const totalDuration = tasks.reduce((acc, task) => acc + task.estimatedDuration, 0);\n    let activeTaskTime = 0;\n    if (currentTaskIndex !== -1 && tasks[currentTaskIndex] && !tasks[currentTaskIndex].completed && !isBreakTime) {\n      activeTaskTime = timeRemaining > 0 ? timeRemaining : 0; // if timer is up, count 0 unless extended\n    }\n    const unstartedTasksDuration = tasks.filter(task => !task.started && !task.completed).reduce((acc, task) => acc + task.estimatedDuration * 60, 0);\n    const remainingSeconds = activeTaskTime + unstartedTasksDuration;\n    // Probability calculation can be refined later\n    return {\n      totalPlannedTime: totalDuration,\n      remainingTaskTime: Math.ceil(remainingSeconds / 60),\n      probNotFinishing: 0 // Placeholder\n    };\n  }, [tasks, currentTaskIndex, timeRemaining, isBreakTime]);\n  const dailyStats = calculateDailyStats();\n  const activeTaskObject = currentTaskIndex !== -1 && tasks[currentTaskIndex] ? tasks[currentTaskIndex] : null;\n  const currentDisplayTaskName = isBreakTime ? \"Break Time!\" : activeTaskObject ? activeTaskObject.name : \"No Active Task\";\n\n  // Spirals handlers (to be implemented)\n  const handleAddSpiral = useCallback(spiralName => {\n    if (!spiralName.trim()) {\n      toast({\n        title: \"Invalid Spiral\",\n        description: \"Spiral name cannot be empty.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    setSpirals(prev => [...prev, {\n      id: Date.now(),\n      name: spiralName.trim()\n    }]);\n    toast({\n      title: \"Spiral Added\",\n      description: `\"${spiralName.trim()}\" added to spirals.`\n    });\n  }, []);\n  const handleRemoveSpiral = useCallback(spiralId => {\n    const spiralToRemove = spirals.find(s => s.id === spiralId);\n    setSpirals(prev => prev.filter(s => s.id !== spiralId));\n    if (spiralToRemove) {\n      toast({\n        title: \"Spiral Removed\",\n        description: `\"${spiralToRemove.name}\" removed.`,\n        variant: \"destructive\"\n      });\n    }\n  }, [spirals]);\n  const handleMoveSpiralToTasks = useCallback(spiralId => {\n    const spiralToMove = spirals.find(s => s.id === spiralId);\n    if (!spiralToMove) return;\n    setPromptConfig({\n      title: \"Move Spiral to Task\",\n      message: `Enter estimated duration (minutes) for task \"${spiralToMove.name}\":`,\n      inputLabel: \"Duration (minutes):\",\n      defaultValue: \"30\",\n      confirmText: \"Move to Tasks\",\n      cancelText: \"Cancel\",\n      placeholder: \"e.g., 30\",\n      onConfirm: durationText => {\n        if (durationText === null) return;\n        const duration = parseInt(durationText, 10);\n        if (duration && duration > 0) {\n          handleAddTask({\n            name: spiralToMove.name,\n            duration\n          });\n          setSpirals(prev => prev.filter(s => s.id !== spiralId));\n          toast({\n            title: \"Spiral Moved\",\n            description: `\"${spiralToMove.name}\" moved to tasks.`\n          });\n        } else {\n          toast({\n            title: \"Invalid Duration\",\n            description: \"Please enter a positive number for duration.\",\n            variant: \"destructive\"\n          });\n        }\n      }\n    });\n    setIsPromptOpen(true);\n  }, [spirals, handleAddTask, setIsPromptOpen, setPromptConfig]);\n  const handleMasterPlayPause = () => {\n    if (isTimerActive) {\n      // If timer is supposed to be active (running or paused awaiting resume)\n      handlePauseTimer(); // This will set isTimerActive = false and clear interval\n    } else {\n      // Timer is not supposed to be active (fully stopped or explicitly paused)\n      // Check if we can resume an existing task or break\n      if (timeRemaining > 0 && (currentTaskIndex !== -1 && tasks[currentTaskIndex] && !tasks[currentTaskIndex].completed && !isBreakTime || isBreakTime)) {\n        handleResumeTimer(); // This will set isTimerActive = true\n      } else {\n        // Otherwise, try to start the first available (uncompleted) task\n        const firstUncompletedTaskIndex = tasks.findIndex(t => !t.completed);\n        if (firstUncompletedTaskIndex !== -1) {\n          startTimer(firstUncompletedTaskIndex); // startTimer sets isTimerActive = true\n        } else {\n          toast({\n            title: \"No Tasks\",\n            description: \"Add a task or all tasks are complete.\",\n            variant: \"default\"\n          });\n        }\n      }\n    }\n  };\n\n  // JSX will be in the next part\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-dark text-lightText p-4 sm:p-6 md:p-8\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"bg-dark-100 p-6 rounded-lg shadow-lg mb-8 ring-1 ring-dark-300\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-4xl font-bold text-center text-cyanAccent\",\n        children: \"Time Boxer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 9\n      }, this), naggingQuote && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-center text-subtleText italic mt-2\",\n        children: naggingQuote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 508,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"max-w-7xl mx-auto grid grid-cols-1 lg:grid-cols-3 gap-6\",\n      children: [/*#__PURE__*/_jsxDEV(Card, {\n        className: \"lg:col-span-3 bg-dark-100 ring-1 ring-dark-300\",\n        children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n          className: \"text-center\",\n          children: /*#__PURE__*/_jsxDEV(CardTitle, {\n            className: \"text-2xl font-semibold text-cyanAccent\",\n            children: [\"Current Task: \", currentDisplayTaskName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 516,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n          className: \"text-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"timer-clock-react\",\n            className: `text-7xl sm:text-8xl md:text-9xl font-mono font-bold ${timerDisplayColor()} my-4 sm:my-6 tabular-nums transition-colors duration-300`,\n            children: formatTime(timeRemaining)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 519,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex flex-wrap justify-center items-center gap-2 sm:gap-3 md:gap-4 mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outline\",\n              size: \"lg\",\n              className: \"flex-grow sm:flex-grow-0\",\n              onClick: handleMasterPlayPause,\n              disabled: !isTimerActive && timeRemaining === 0 && tasks.findIndex(t => !t.completed) === -1,\n              children: isTimerActive ? \"Pause\" : timeRemaining > 0 ? \"Resume\" : \"Start\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 523,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: isBreakTime ? \"buttonGray\" : \"buttonGreen\",\n              size: \"lg\",\n              className: \"flex-grow sm:flex-grow-0\",\n              onClick: () => {\n                if (isBreakTime) {\n                  handleSkipBreak();\n                } else {\n                  handleTaskDone();\n                }\n              },\n              disabled: isBreakTime ? !isTimerActive : currentTaskIndex === -1 || !tasks[currentTaskIndex] || tasks[currentTaskIndex].completed,\n              children: isBreakTime ? \"Skip Break\" : \"Done!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 532,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 522,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"buttonGray\",\n              size: \"lg\",\n              onClick: handleExtendTimer,\n              disabled:\n              // Revised disabled logic\n              timeRemaining > 0 ||\n              // Disabled if time is still running\n              !isBreakTime && (\n              // For tasks:\n              currentTaskIndex === -1 || !tasks[currentTaskIndex] || !tasks[currentTaskIndex].started || tasks[currentTaskIndex].completed)\n              // For breaks, it's enabled if timeRemaining is 0 (covered by first condition being false)\n              ,\n              children: \"Extend Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 557,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 556,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        className: \"lg:col-span-1 bg-dark-100 ring-1 ring-dark-300\",\n        children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n          children: /*#__PURE__*/_jsxDEV(CardTitle, {\n            className: \"text-xl font-semibold text-cyanAccent\",\n            children: \"Plan Your Day\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 579,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 578,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(TaskForm, {\n            onAddTask: handleAddTask\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 582,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-6 pt-6 border-t border-dark-300 space-y-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"text-md font-semibold text-cyanAccent mb-3\",\n              children: \"Daily Stats\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 584,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm text-subtleText flex justify-between\",\n              children: [\"Total Planned: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-timerAccent font-semibold\",\n                children: [dailyStats.totalPlannedTime, \" min\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 585,\n                columnNumber: 92\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 585,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm text-subtleText flex justify-between\",\n              children: [\"Remaining: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-timerAccent font-semibold\",\n                children: [dailyStats.remainingTaskTime, \" min\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 586,\n                columnNumber: 88\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 586,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm text-subtleText flex justify-between\",\n              children: [\"P(Not Finishing): \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-timerAccent font-semibold\",\n                children: [dailyStats.probNotFinishing, \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 587,\n                columnNumber: 95\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 587,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 583,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 581,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 577,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        className: \"lg:col-span-2 bg-dark-100 ring-1 ring-dark-300\",\n        children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n          children: /*#__PURE__*/_jsxDEV(CardTitle, {\n            className: \"text-xl font-semibold text-cyanAccent\",\n            children: \"Today's Tasks\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 594,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n          children: /*#__PURE__*/_jsxDEV(TaskList, {\n            tasks: tasks,\n            onRemoveTask: handleRemoveTask,\n            onStartTask: taskId => {\n              const currentTasks = tasks; // Capture for logging & consistent check\n              const taskIndex = currentTasks.findIndex(t => t.id === taskId);\n              console.log('[App onStartTask] Attempting to start task:', {\n                taskId,\n                taskIndex,\n                currentTasksLength: currentTasks.length,\n                currentTasksIds: currentTasks.map(t => t.id)\n              });\n              if (taskIndex !== -1) {\n                // Pre-flight check using the same logic as startTimer's first guard\n                if (taskIndex < 0 || taskIndex >= currentTasks.length || !currentTasks[taskIndex]) {\n                  console.error(\"[App onStartTask PRE-CHECK FAILED] taskIndex out of bounds for current tasks.\", {\n                    taskId,\n                    taskIndex,\n                    currentTasksLength: currentTasks.length\n                  });\n                  toast({\n                    title: \"Task Sync Issue\",\n                    description: \"State inconsistency before starting timer. Please try again.\",\n                    variant: \"destructive\"\n                  });\n                  return;\n                }\n                startTimer(taskIndex);\n              } else {\n                console.error(\"[App onStartTask] Task ID not found in current tasks:\", {\n                  taskId\n                });\n                toast({\n                  title: \"Task Not Found\",\n                  description: \"The selected task could not be found to start.\",\n                  variant: \"destructive\"\n                });\n              }\n            },\n            currentTaskIndex: currentTaskIndex // Pass the index\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 597,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 596,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 592,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        className: \"lg:col-span-3 bg-dark-100 ring-1 ring-dark-300\",\n        children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n          children: /*#__PURE__*/_jsxDEV(CardTitle, {\n            className: \"text-xl font-semibold text-cyanAccent\",\n            children: \"Spirals (Ideas for Later)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 637,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 636,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(SpiralForm, {\n            onAddSpiral: handleAddSpiral\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 640,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SpiralList, {\n            spirals: spirals,\n            onRemoveSpiral: handleRemoveSpiral,\n            onMoveSpiralToTasks: handleMoveSpiralToTasks\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 641,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 639,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 635,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"bg-dark-100 text-subtleText p-6 rounded-lg shadow-lg mt-8 text-center ring-1 ring-dark-300\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm\",\n        children: [\"Score: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-timerAccent font-semibold\",\n          children: score\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 651,\n          columnNumber: 39\n        }, this), \" | Tasks Completed: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-timerAccent font-semibold\",\n          children: tasks.filter(t => t.completed).length\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 651,\n          columnNumber: 122\n        }, this), \" | Focus Time: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-timerAccent font-semibold\",\n          children: [dailyStats.remainingTaskTime, \" min\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 651,\n          columnNumber: 232\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 651,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 650,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Toaster, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 653,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PromptDialog, {\n      isOpen: isPromptOpen,\n      onOpenChange: setIsPromptOpen,\n      title: promptConfig.title,\n      message: promptConfig.message,\n      inputLabel: promptConfig.inputLabel,\n      defaultValue: promptConfig.defaultValue,\n      confirmText: promptConfig.confirmText,\n      cancelText: promptConfig.cancelText,\n      onConfirm: promptConfig.onConfirm,\n      placeholder: promptConfig.placeholder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 654,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 507,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"N/O32JgHHXv4NkkzqBkWgU+Ru4I=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","Button","Card","CardHeader","CardTitle","CardContent","TaskForm","TaskList","Toaster","toast","confetti","PromptDialog","SpiralForm","SpiralList","jsxDEV","_jsxDEV","motivationalQuotes","POINTS_PER_TASK","BONUS_POINTS_FACTOR","DEFAULT_BREAK_DURATION_MINUTES","POINTS_DEDUCTION_FOR_EXTENSION","App","_s","naggingQuote","setNaggingQuote","tasks","setTasks","spirals","setSpirals","currentTaskIndex","setCurrentTaskIndex","timeRemaining","setTimeRemaining","isTimerActive","setIsTimerActive","isBreakTime","setIsBreakTime","timerIntervalId","score","setScore","notificationSound","quoteIntervalId","isPromptOpen","setIsPromptOpen","promptConfig","setPromptConfig","title","message","inputLabel","defaultValue","confirmText","cancelText","onConfirm","placeholder","getRandomQuote","Math","floor","random","length","current","Audio","Notification","permission","requestPermission","then","console","log","playNotificationSound","_notificationSound$cu","play","catch","error","showDesktopNotification","body","updateNaggingQuote","startNaggingQuoteInterval","setInterval","stopNaggingQuoteInterval","clearInterval","handleAddTask","newTaskData","prevTasks","id","Date","now","name","duration","estimatedDuration","completed","started","timeSpentSeconds","timerStartTime","completionTimestamp","description","handleRemoveTask","taskId","_tasks$currentTaskInd","taskToRemove","find","t","filter","task","variant","startTimer","taskIndex","_tasks$currentTaskInd2","taskToStart","map","idx","timeToSet","handlePauseTimer","handleResumeTimer","handleTaskDone","pointsEarnedThisTask","timeWhenDone","actualTimeSpent","estimatedSeconds","secondsSaved","bonus","prevScore","particleCount","spread","origin","y","handleSkipBreak","handleExtendTimer","context","defaultExtension","extendMinutesText","extendMinutes","parseInt","isNaN","newTimeRemaining","toastDescription","prevTime","formatTime","totalSeconds","minutes","seconds","String","padStart","timerDisplayColor","totalTaskSeconds","percentageRemaining","calculateDailyStats","totalDuration","reduce","acc","activeTaskTime","unstartedTasksDuration","remainingSeconds","totalPlannedTime","remainingTaskTime","ceil","probNotFinishing","dailyStats","activeTaskObject","currentDisplayTaskName","handleAddSpiral","spiralName","trim","prev","handleRemoveSpiral","spiralId","spiralToRemove","s","handleMoveSpiralToTasks","spiralToMove","durationText","handleMasterPlayPause","firstUncompletedTaskIndex","findIndex","className","children","fileName","_jsxFileName","lineNumber","columnNumber","size","onClick","disabled","onAddTask","onRemoveTask","onStartTask","currentTasks","currentTasksLength","currentTasksIds","onAddSpiral","onRemoveSpiral","onMoveSpiralToTasks","isOpen","onOpenChange","_c","$RefreshReg$"],"sources":["/home/poodle/Work/TimeBoxing/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { Button } from './components/ui/Button';\nimport { Card, CardHeader, CardTitle, CardContent } from './components/ui/Card';\nimport TaskForm from './components/TaskForm';\nimport TaskList from './components/TaskList';\nimport { Toaster } from './components/Toaster';\nimport { toast } from './hooks/use-toast';\nimport confetti from 'canvas-confetti';\nimport { PromptDialog } from './components/ui/PromptDialog';\nimport SpiralForm from './components/SpiralForm';\nimport SpiralList from './components/SpiralList';\n// Spirals components will be added later\n\nconst motivationalQuotes = [\n  \"You won\\'t be able to do it... Prove me wrong!\",\n  \"Don\\'t disappoint future you.\",\n  \"Less scrolling, more doing!\",\n  \"That task isn\\'t going to complete itself.\",\n  \"Are you a talker or a doer?\",\n  \"Time is ticking. Are you?\",\n  \"Stop procrastinating. Start dominating.\",\n  \"Is this the best use of your time right now?\",\n  \"The clock is your boss. Don\\'t get fired.\"\n];\n\nconst POINTS_PER_TASK = 10;\nconst BONUS_POINTS_FACTOR = 0.5; // points per second saved\nconst DEFAULT_BREAK_DURATION_MINUTES = 5;\nconst POINTS_DEDUCTION_FOR_EXTENSION = 2; // Penalty for extending a task\n\nfunction App() {\n  const [naggingQuote, setNaggingQuote] = useState(\"\");\n  const [tasks, setTasks] = useState([]);\n  const [spirals, setSpirals] = useState([]); // For spirals feature\n  \n  const [currentTaskIndex, setCurrentTaskIndex] = useState(-1); // Index of the active task in the tasks array\n  const [timeRemaining, setTimeRemaining] = useState(0); // In seconds\n  const [isTimerActive, setIsTimerActive] = useState(false); // Is the countdown interval running?\n  const [isBreakTime, setIsBreakTime] = useState(false);\n  const timerIntervalId = useRef(null); // Using useRef to hold interval ID to avoid re-renders causing issues\n  \n  const [score, setScore] = useState(0);\n  const notificationSound = useRef(null);\n  const quoteIntervalId = useRef(null);\n\n  // State for PromptDialog\n  const [isPromptOpen, setIsPromptOpen] = useState(false);\n  const [promptConfig, setPromptConfig] = useState({\n    title: '',\n    message: '',\n    inputLabel: '',\n    defaultValue: '',\n    confirmText: 'Confirm',\n    cancelText: 'Cancel',\n    onConfirm: () => {},\n    placeholder: '',\n  });\n\n  // Initialize nagging quote, sound, and notification permissions\n  useEffect(() => {\n    const getRandomQuote = () => motivationalQuotes[Math.floor(Math.random() * motivationalQuotes.length)];\n    setNaggingQuote(getRandomQuote());\n    notificationSound.current = new Audio('/assets/notification.mp3');\n\n    if (Notification.permission !== \"granted\" && Notification.permission !== \"denied\") {\n      Notification.requestPermission().then(permission => {\n        if (permission === \"granted\") console.log(\"Desktop notification permission granted.\");\n      });\n    }\n  }, []);\n\n  const playNotificationSound = useCallback(() => {\n    notificationSound.current?.play().catch(error => console.error(\"Error playing sound:\", error));\n  }, []);\n\n  const showDesktopNotification = useCallback((title, body) => {\n    if (Notification.permission === \"granted\") new Notification(title, { body });\n  }, []);\n\n  // Nagging quote logic\n  const updateNaggingQuote = useCallback(() => {\n    const getRandomQuote = () => motivationalQuotes[Math.floor(Math.random() * motivationalQuotes.length)];\n    setNaggingQuote(getRandomQuote());\n  }, [])\n\n  const startNaggingQuoteInterval = useCallback(() => {\n    if (!isTimerActive && !quoteIntervalId.current) {\n      updateNaggingQuote();\n      quoteIntervalId.current = setInterval(updateNaggingQuote, 30000);\n    }\n  }, [isTimerActive, updateNaggingQuote]);\n\n  const stopNaggingQuoteInterval = useCallback(() => {\n    if (quoteIntervalId.current) {\n      clearInterval(quoteIntervalId.current);\n      quoteIntervalId.current = null;\n    }\n  }, []);\n\n  useEffect(() => {\n    if (isTimerActive) {\n      stopNaggingQuoteInterval();\n    } else {\n      startNaggingQuoteInterval();\n    }\n    return () => stopNaggingQuoteInterval(); // Cleanup on unmount\n  }, [isTimerActive, startNaggingQuoteInterval, stopNaggingQuoteInterval]);\n\n\n  // Task Management\n  const handleAddTask = useCallback((newTaskData) => {\n    setTasks(prevTasks => [\n      ...prevTasks,\n      {\n        id: Date.now(),\n        name: newTaskData.name,\n        duration: newTaskData.duration, // user input in minutes\n        estimatedDuration: newTaskData.duration,\n        completed: false,\n        started: false,\n        timeSpentSeconds: 0,\n        timerStartTime: null,\n        completionTimestamp: null,\n      }\n    ]);\n    toast({ title: \"Task Added\", description: `\"${newTaskData.name}\" added to your list.` });\n  }, []);\n\n  const handleRemoveTask = useCallback((taskId) => {\n    const taskToRemove = tasks.find(t => t.id === taskId);\n    setTasks(prevTasks => prevTasks.filter(task => task.id !== taskId));\n    if (taskToRemove) {\n      toast({ title: \"Task Removed\", description: `\"${taskToRemove.name}\" has been removed.`, variant: \"destructive\" });\n    }\n    if (currentTaskIndex !== -1 && tasks[currentTaskIndex]?.id === taskId) {\n      if (timerIntervalId.current) clearInterval(timerIntervalId.current);\n      timerIntervalId.current = null;\n      setCurrentTaskIndex(-1);\n      setTimeRemaining(0);\n      setIsTimerActive(false);\n      setIsBreakTime(false);\n    }\n  }, [tasks, currentTaskIndex]);\n\n  // Timer Core Logic: Start, Pause, Resume, Done, Extend\n  const startTimer = useCallback((taskIndex) => {\n    // Guard 1: Basic validity and completion check\n    if (taskIndex < 0 || taskIndex >= tasks.length || !tasks[taskIndex]) {\n      toast({ title: \"Invalid Task\", description: \"Task not found or index is out of bounds.\", variant: \"destructive\" });\n      return;\n    }\n    if (tasks[taskIndex].completed) {\n      toast({ title: \"Task Completed\", description: `\"${tasks[taskIndex].name}\" is already completed.`, variant: \"default\" });\n      return;\n    }\n\n    // Guard 2: Check if another task is active or this specific one\n    if (isTimerActive && !isBreakTime && currentTaskIndex === taskIndex) {\n      toast({ title: \"Already Active\", description: `\"${tasks[taskIndex].name}\" is already running.`, variant: \"default\" });\n      return;\n    }\n    if (isTimerActive && !isBreakTime && currentTaskIndex !== -1 && currentTaskIndex !== taskIndex) { \n      toast({ title: \"Timer Busy\", description: `\"${tasks[currentTaskIndex]?.name || 'Another task'}\" is in progress. Complete or stop it first.`, variant: \"destructive\" });\n      return;\n    }\n    \n    // Guard 3: Handle active break\n    if (isBreakTime) { \n      if (timerIntervalId.current) clearInterval(timerIntervalId.current);\n      timerIntervalId.current = null;\n      setIsBreakTime(false); // Stop the break\n      toast({ title: \"Break Interrupted\", description: \"Starting a new task.\" });\n    }\n\n    const taskToStart = tasks[taskIndex];\n\n    // This extra check is for absolute safety, though guards above should cover it.\n    if (!taskToStart || typeof taskToStart.duration === 'undefined') {\n        console.error(\"Critical error: taskToStart is invalid despite guards. taskIndex:\", taskIndex, \"task:\", taskToStart);\n        toast({ title: \"Task Data Error\", description: \"Cannot start task due to incomplete data. Please check console.\", variant: \"destructive\" });\n        return;\n    }\n    \n    setTasks(prevTasks =>\n      prevTasks.map((task, idx) =>\n        idx === taskIndex ? { ...task, started: true, timerStartTime: Date.now(), timeSpentSeconds: task.timeSpentSeconds || 0 } : task\n      )\n    );\n    setCurrentTaskIndex(taskIndex);\n    // If task was partially worked on, resume from remaining, else from full duration\n    const timeToSet = (taskToStart.duration * 60) - (taskToStart.timeSpentSeconds || 0);\n    setTimeRemaining(timeToSet > 0 ? timeToSet : taskToStart.duration * 60); // Ensure it doesn't start negative\n    setIsTimerActive(true);\n    setIsBreakTime(false); // Ensure break mode is off\n    toast({ title: \"Task Started\", description: `Timer for \"${taskToStart.name}\" has begun.` });\n  }, [tasks, isTimerActive, isBreakTime, currentTaskIndex]);\n\n  const handlePauseTimer = useCallback(() => {\n    if (timerIntervalId.current) { // If interval exists, it means it was active\n      clearInterval(timerIntervalId.current);\n      timerIntervalId.current = null;\n      setIsTimerActive(false); // Timer is no longer actively ticking\n      toast({ title: isBreakTime ? \"Break Paused\" : \"Timer Paused\" });\n    }\n  }, [isBreakTime]); // setIsTimerActive is stable and doesn't need to be a dependency\n\n  const handleResumeTimer = useCallback(() => {\n    // Conditions to resume: must not be already set to active, must have time, and a context (task or break)\n    if (!isTimerActive && timeRemaining > 0 && \n        ((currentTaskIndex !== -1 && tasks[currentTaskIndex] && !tasks[currentTaskIndex].completed && !isBreakTime) || isBreakTime)) {\n       setIsTimerActive(true); // Signal the useEffect to start the interval\n       toast({ title: isBreakTime ? \"Break Resumed\" : \"Timer Resumed\" });\n    }\n  }, [isTimerActive, timeRemaining, currentTaskIndex, tasks, isBreakTime]); // tasks is needed for tasks[currentTaskIndex]\n\n  const handleTaskDone = useCallback(() => {\n    if (currentTaskIndex === -1 || !tasks[currentTaskIndex] || tasks[currentTaskIndex].completed) {\n      toast({title: \"No Active Task\", description: \"No task to mark as done.\", variant: \"default\"});\n      return;\n    }\n\n    const task = tasks[currentTaskIndex];\n    let pointsEarnedThisTask = POINTS_PER_TASK;\n    // Calculate timeSpent more accurately based on when 'Done' is clicked relative to timer\n    const timeWhenDone = task.timerStartTime ? (Date.now() - task.timerStartTime) / 1000 : task.timeSpentSeconds;\n    const actualTimeSpent = timeWhenDone < task.duration * 60 ? timeWhenDone : task.duration * 60; // Cap at original duration for bonus calc\n\n    const estimatedSeconds = task.estimatedDuration * 60;\n    if (actualTimeSpent < estimatedSeconds) {\n      const secondsSaved = estimatedSeconds - actualTimeSpent;\n      const bonus = Math.floor(secondsSaved * BONUS_POINTS_FACTOR);\n      pointsEarnedThisTask += bonus;\n    }\n    setScore(prevScore => prevScore + pointsEarnedThisTask);\n    confetti({ particleCount: 150, spread: 100, origin: { y: 0.6 } });\n\n    setTasks(prevTasks => prevTasks.map((t, idx) =>\n      idx === currentTaskIndex ? { \n        ...t, \n        completed: true, \n        timeSpentSeconds: actualTimeSpent, // Update with more precise time\n        duration: actualTimeSpent / 60, // Reflect actual time in duration field for display/stats if needed\n        completionTimestamp: Date.now() \n      } : t\n    ));\n\n    if (timerIntervalId.current) {\n        clearInterval(timerIntervalId.current);\n        timerIntervalId.current = null;\n    }\n    setIsTimerActive(false); // Task timer is now definitively stopped.\n    \n    playNotificationSound();\n    showDesktopNotification(\"Task Finished!\", `\"${task.name}\" is complete.`);\n    toast({ title: \"Task Finished!\", description: `\"${task.name}\" complete. Points: +${pointsEarnedThisTask}` });\n    \n    // Start a break automatically\n    setIsBreakTime(true);\n    setTimeRemaining(DEFAULT_BREAK_DURATION_MINUTES * 60);\n    setCurrentTaskIndex(-1); // No task is active during break\n    setIsTimerActive(true); // Signal useEffect to start the break timer\n    toast({title: \"Break Time!\", description: `Taking a ${DEFAULT_BREAK_DURATION_MINUTES} minute break.`});\n\n  }, [tasks, currentTaskIndex, playNotificationSound, showDesktopNotification, POINTS_PER_TASK, BONUS_POINTS_FACTOR, DEFAULT_BREAK_DURATION_MINUTES]); // Removed timeRemaining as it caused stale closures for actualTimeSpent\n\n  const handleSkipBreak = useCallback(() => {\n    if (isBreakTime && isTimerActive) {\n      if (timerIntervalId.current) {\n        clearInterval(timerIntervalId.current);\n        timerIntervalId.current = null;\n      }\n      setIsTimerActive(false);\n      setIsBreakTime(false);\n      setTimeRemaining(0);\n      setCurrentTaskIndex(-1); \n      toast({title: \"Break Skipped\", description: \"Break ended. Ready for the next task?\"});\n    } else {\n      toast({title: \"No Active Break\", description: \"There is no active break to skip.\", variant: \"default\"});\n    }\n  }, [isBreakTime, isTimerActive]); // Include all dependencies\n\n  const handleExtendTimer = useCallback(() => {\n    // Condition 1: No timer active at all (neither task nor break has been started)\n    if (currentTaskIndex === -1 && !isBreakTime) {\n      toast({title: \"No Timer Active\", description: \"Start a task or break to extend its time.\", variant: \"default\"});\n      return;\n    }\n\n    // Condition 2: Time still remaining on the clock (not 0)\n    if (timeRemaining > 0) {\n        toast({title: \"Timer Still Running\", description: \"Time can only be extended when the timer reaches 0.\", variant: \"default\"});\n        return;\n    }\n\n    // Condition 3: If it's a task, it must not be completed\n    if (!isBreakTime && tasks[currentTaskIndex] && tasks[currentTaskIndex].completed) {\n        toast({title: \"Task Completed\", description: `Task \"${tasks[currentTaskIndex].name}\" is already completed and cannot be extended.`, variant: \"default\"});\n        return;\n    }\n    \n    const context = isBreakTime ? \"break\" : (tasks[currentTaskIndex] ? `task \"${tasks[currentTaskIndex].name}\"` : \"task\");\n    const defaultExtension = \"5\";\n\n    setPromptConfig({\n      title: `Extend ${context}`,\n      message: `How many minutes would you like to add to the ${context}? Timer is currently at 00:00.`,\n      inputLabel: 'Minutes to add:',\n      defaultValue: defaultExtension,\n      confirmText: 'Extend',\n      cancelText: 'Cancel',\n      placeholder: 'Enter minutes',\n      onConfirm: (extendMinutesText) => {\n        const extendMinutes = parseInt(extendMinutesText, 10);\n\n        if (!isNaN(extendMinutes) && extendMinutes > 0) {\n          const newTimeRemaining = timeRemaining + extendMinutes * 60; // timeRemaining will be 0 here\n          setTimeRemaining(newTimeRemaining);\n          \n          let toastDescription = `Added ${extendMinutes} minutes to ${context}.`;\n\n          if (currentTaskIndex !== -1 && !isBreakTime && tasks[currentTaskIndex]) {\n            setTasks(prevTasks => prevTasks.map((t, idx) =>\n              idx === currentTaskIndex ? { ...t, duration: t.duration + extendMinutes, estimatedDuration: t.estimatedDuration + extendMinutes } : t\n            ));\n            // Deduct points for task extension\n            setScore(prevScore => prevScore - POINTS_DEDUCTION_FOR_EXTENSION);\n            toastDescription += ` Points: -${POINTS_DEDUCTION_FOR_EXTENSION}`;\n          }\n          \n          // If the timer was not active (which it will be, as timeRemaining was 0) and now has time, reactivate it.\n          if (!isTimerActive && newTimeRemaining > 0) {\n            setIsTimerActive(true);\n          }\n          toast({ title: \"Timer Extended\", description: toastDescription });\n        } else {\n          toast({ title: \"Invalid Input\", description: \"Please enter a valid number of minutes.\", variant: \"destructive\" });\n        }\n      }\n    });\n    setIsPromptOpen(true);\n  }, [currentTaskIndex, isBreakTime, isTimerActive, timeRemaining, tasks, setTasks, score]); // Added score to dependencies\n\n  // Effect for Timer Countdown\n  useEffect(() => {\n    if (isTimerActive && timeRemaining > 0) {\n      // If timer should be active and there's time, start the interval\n      timerIntervalId.current = setInterval(() => {\n        setTimeRemaining(prevTime => {\n          if (prevTime <= 1) { \n            // Stop the interval first\n            if(timerIntervalId.current) clearInterval(timerIntervalId.current);\n            timerIntervalId.current = null;\n            setIsTimerActive(false); // Timer is no longer active\n            \n            if (isBreakTime) {\n              playNotificationSound();\n              showDesktopNotification(\"Break Over!\", \"Your break time is up.\");\n              toast({ title: \"Break Finished!\", description: \"Ready for the next task?\" });\n              setIsBreakTime(false); // Break is over\n              setCurrentTaskIndex(-1); // No active task\n            } else if (currentTaskIndex !== -1 && tasks[currentTaskIndex]) {\n              const task = tasks[currentTaskIndex];\n              // Increment timeSpentSeconds one last time for the final second\n              setTasks(prevTasks => prevTasks.map((t, idx) => \n                idx === currentTaskIndex ? {...t, timeSpentSeconds: (t.timeSpentSeconds || 0) + 1} : t\n              ));\n              playNotificationSound();\n              showDesktopNotification(\"Time's Up!\", `Time for \"${task.name}\" is up.`);\n              toast({ title: \"Time's Up!\", description: `\"${task.name}\" timer finished. Mark done or extend.` });\n              // User needs to manually mark done or extend. isTimerActive is false.\n            }\n            return 0; // Time is up\n          }\n\n          // Increment timeSpentSeconds for active task during normal countdown\n          if (currentTaskIndex !== -1 && !isBreakTime && tasks[currentTaskIndex]) {\n            setTasks(prevTasks => prevTasks.map((task, idx) => \n                idx === currentTaskIndex ? {...task, timeSpentSeconds: (task.timeSpentSeconds || 0) + 1} : task\n            ));\n          }\n          return prevTime - 1; // Countdown\n        });\n      }, 1000);\n    } else {\n      // If timer shouldn't be active or time is up, ensure interval is cleared\n      if (timerIntervalId.current) {\n        clearInterval(timerIntervalId.current);\n        timerIntervalId.current = null;\n      }\n    }\n    // Cleanup function: always clear interval when dependencies change or component unmounts\n    return () => {\n      if (timerIntervalId.current) {\n        clearInterval(timerIntervalId.current);\n        timerIntervalId.current = null; \n      }\n    };\n  }, [isTimerActive, timeRemaining, tasks, currentTaskIndex, isBreakTime, playNotificationSound, showDesktopNotification, setTasks]); // Added setTasks\n\n  // Formatting and Display Logic\n  const formatTime = (totalSeconds) => {\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;\n  };\n\n  const timerDisplayColor = () => {\n    if (isBreakTime || currentTaskIndex === -1 || !tasks[currentTaskIndex] || tasks[currentTaskIndex].completed) return 'text-timerAccent';\n    const task = tasks[currentTaskIndex];\n    const totalTaskSeconds = task.estimatedDuration * 60;\n    if (totalTaskSeconds === 0) return 'text-timerAccent';\n    const percentageRemaining = (timeRemaining / totalTaskSeconds) * 100;\n    if (percentageRemaining <= 20) return 'text-red-500';\n    if (percentageRemaining <= 50) return 'text-yellow-500';\n    return 'text-timerAccent';\n  };\n\n  const calculateDailyStats = useCallback(() => {\n    const totalDuration = tasks.reduce((acc, task) => acc + task.estimatedDuration, 0);\n    let activeTaskTime = 0;\n    if (currentTaskIndex !== -1 && tasks[currentTaskIndex] && !tasks[currentTaskIndex].completed && !isBreakTime) {\n        activeTaskTime = timeRemaining > 0 ? timeRemaining : 0; // if timer is up, count 0 unless extended\n    }\n    const unstartedTasksDuration = tasks\n        .filter(task => !task.started && !task.completed)\n        .reduce((acc, task) => acc + (task.estimatedDuration * 60), 0);\n    const remainingSeconds = activeTaskTime + unstartedTasksDuration;\n    // Probability calculation can be refined later\n    return {\n      totalPlannedTime: totalDuration,\n      remainingTaskTime: Math.ceil(remainingSeconds / 60),\n      probNotFinishing: 0, // Placeholder\n    };\n  }, [tasks, currentTaskIndex, timeRemaining, isBreakTime]);\n\n  const dailyStats = calculateDailyStats();\n  const activeTaskObject = currentTaskIndex !== -1 && tasks[currentTaskIndex] ? tasks[currentTaskIndex] : null;\n  const currentDisplayTaskName = isBreakTime ? \"Break Time!\" : (activeTaskObject ? activeTaskObject.name : \"No Active Task\");\n\n  // Spirals handlers (to be implemented)\n  const handleAddSpiral = useCallback((spiralName) => {\n    if (!spiralName.trim()) {\n        toast({title: \"Invalid Spiral\", description: \"Spiral name cannot be empty.\", variant: \"destructive\"});\n        return;\n    }\n    setSpirals(prev => [...prev, { id: Date.now(), name: spiralName.trim() }]);\n    toast({title: \"Spiral Added\", description: `\"${spiralName.trim()}\" added to spirals.`});\n  }, []);\n\n  const handleRemoveSpiral = useCallback((spiralId) => {\n    const spiralToRemove = spirals.find(s => s.id === spiralId);\n    setSpirals(prev => prev.filter(s => s.id !== spiralId));\n    if (spiralToRemove) {\n        toast({title: \"Spiral Removed\", description: `\"${spiralToRemove.name}\" removed.`, variant: \"destructive\"});\n    }\n  }, [spirals]);\n\n  const handleMoveSpiralToTasks = useCallback((spiralId) => {\n    const spiralToMove = spirals.find(s => s.id === spiralId);\n    if (!spiralToMove) return;\n\n    setPromptConfig({\n      title: \"Move Spiral to Task\",\n      message: `Enter estimated duration (minutes) for task \"${spiralToMove.name}\":`,\n      inputLabel: \"Duration (minutes):\",\n      defaultValue: \"30\",\n      confirmText: \"Move to Tasks\",\n      cancelText: \"Cancel\",\n      placeholder: \"e.g., 30\",\n      onConfirm: (durationText) => {\n        if (durationText === null) return; \n        const duration = parseInt(durationText, 10);\n\n        if (duration && duration > 0) {\n          handleAddTask({ name: spiralToMove.name, duration });\n          setSpirals(prev => prev.filter(s => s.id !== spiralId));\n          toast({ title: \"Spiral Moved\", description: `\"${spiralToMove.name}\" moved to tasks.` });\n        } else {\n          toast({ title: \"Invalid Duration\", description: \"Please enter a positive number for duration.\", variant: \"destructive\" });\n        }\n      }\n    });\n    setIsPromptOpen(true); \n  }, [spirals, handleAddTask, setIsPromptOpen, setPromptConfig]);\n\n  const handleMasterPlayPause = () => {\n    if (isTimerActive) { // If timer is supposed to be active (running or paused awaiting resume)\n      handlePauseTimer(); // This will set isTimerActive = false and clear interval\n    } else { // Timer is not supposed to be active (fully stopped or explicitly paused)\n      // Check if we can resume an existing task or break\n      if (timeRemaining > 0 && ((currentTaskIndex !== -1 && tasks[currentTaskIndex] && !tasks[currentTaskIndex].completed && !isBreakTime) || isBreakTime)) {\n        handleResumeTimer(); // This will set isTimerActive = true\n      } else {\n        // Otherwise, try to start the first available (uncompleted) task\n        const firstUncompletedTaskIndex = tasks.findIndex(t => !t.completed);\n        if (firstUncompletedTaskIndex !== -1) {\n          startTimer(firstUncompletedTaskIndex); // startTimer sets isTimerActive = true\n        } else {\n          toast({title: \"No Tasks\", description: \"Add a task or all tasks are complete.\", variant:\"default\"});\n        }\n      }\n    }\n  };\n\n  // JSX will be in the next part\n  return (\n    <div className=\"min-h-screen bg-dark text-lightText p-4 sm:p-6 md:p-8\">\n      <header className=\"bg-dark-100 p-6 rounded-lg shadow-lg mb-8 ring-1 ring-dark-300\">\n        <h1 className=\"text-4xl font-bold text-center text-cyanAccent\">Time Boxer</h1>\n        {naggingQuote && <p className=\"text-center text-subtleText italic mt-2\">{naggingQuote}</p>}\n      </header>\n\n      <main className=\"max-w-7xl mx-auto grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        <Card className=\"lg:col-span-3 bg-dark-100 ring-1 ring-dark-300\">\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"text-2xl font-semibold text-cyanAccent\">Current Task: {currentDisplayTaskName}</CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-center\">\n            <div id=\"timer-clock-react\" className={`text-7xl sm:text-8xl md:text-9xl font-mono font-bold ${timerDisplayColor()} my-4 sm:my-6 tabular-nums transition-colors duration-300`}>\n              {formatTime(timeRemaining)}\n            </div>\n            <div className=\"flex flex-wrap justify-center items-center gap-2 sm:gap-3 md:gap-4 mb-4\">\n              <Button \n                variant=\"outline\" \n                size=\"lg\" \n                className=\"flex-grow sm:flex-grow-0\"\n                onClick={handleMasterPlayPause}\n                disabled={!isTimerActive && timeRemaining === 0 && tasks.findIndex(t => !t.completed) === -1}\n              >\n                {isTimerActive ? \"Pause\" : (timeRemaining > 0 ? \"Resume\" : \"Start\")}\n              </Button>\n              <Button \n                  variant={isBreakTime ? \"buttonGray\" : \"buttonGreen\"}\n                  size=\"lg\" \n                  className=\"flex-grow sm:flex-grow-0\"\n                  onClick={() => {\n                    if (isBreakTime) {\n                      handleSkipBreak();\n                    } else {\n                      handleTaskDone();\n                    }\n                  }}\n                  disabled={\n                    isBreakTime ? \n                      !isTimerActive : \n                      (\n                        currentTaskIndex === -1 || \n                        !tasks[currentTaskIndex] || \n                        tasks[currentTaskIndex].completed\n                      )\n                  }\n              >\n                  {isBreakTime ? \"Skip Break\" : \"Done!\"}\n              </Button>\n            </div>\n            <div>\n              <Button \n                variant=\"buttonGray\" \n                size=\"lg\" \n                onClick={handleExtendTimer}\n                disabled={ // Revised disabled logic\n                  timeRemaining > 0 || // Disabled if time is still running\n                  (!isBreakTime && // For tasks:\n                    (currentTaskIndex === -1 || \n                    !tasks[currentTaskIndex] || \n                    !tasks[currentTaskIndex].started || \n                    tasks[currentTaskIndex].completed))\n                  // For breaks, it's enabled if timeRemaining is 0 (covered by first condition being false)\n                }\n              >\n                Extend Time\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"lg:col-span-1 bg-dark-100 ring-1 ring-dark-300\">\n          <CardHeader>\n            <CardTitle className=\"text-xl font-semibold text-cyanAccent\">Plan Your Day</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <TaskForm onAddTask={handleAddTask} />\n            <div className=\"mt-6 pt-6 border-t border-dark-300 space-y-2\">\n                <h3 className=\"text-md font-semibold text-cyanAccent mb-3\">Daily Stats</h3>\n                <p className=\"text-sm text-subtleText flex justify-between\">Total Planned: <span className='text-timerAccent font-semibold'>{dailyStats.totalPlannedTime} min</span></p>\n                <p className=\"text-sm text-subtleText flex justify-between\">Remaining: <span className='text-timerAccent font-semibold'>{dailyStats.remainingTaskTime} min</span></p>\n                <p className=\"text-sm text-subtleText flex justify-between\">P(Not Finishing): <span className='text-timerAccent font-semibold'>{dailyStats.probNotFinishing}%</span></p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"lg:col-span-2 bg-dark-100 ring-1 ring-dark-300\">\n          <CardHeader>\n            <CardTitle className=\"text-xl font-semibold text-cyanAccent\">Today's Tasks</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <TaskList \n                tasks={tasks} \n                onRemoveTask={handleRemoveTask} \n                onStartTask={(taskId) => {\n                    const currentTasks = tasks; // Capture for logging & consistent check\n                    const taskIndex = currentTasks.findIndex(t => t.id === taskId);\n                    \n                    console.log('[App onStartTask] Attempting to start task:', \n                        { taskId, taskIndex, currentTasksLength: currentTasks.length, \n                          currentTasksIds: currentTasks.map(t => t.id) });\n\n                    if (taskIndex !== -1) {\n                        // Pre-flight check using the same logic as startTimer's first guard\n                        if (taskIndex < 0 || taskIndex >= currentTasks.length || !currentTasks[taskIndex]) {\n                            console.error(\"[App onStartTask PRE-CHECK FAILED] taskIndex out of bounds for current tasks.\", \n                                { taskId, taskIndex, currentTasksLength: currentTasks.length });\n                            toast({ \n                                title: \"Task Sync Issue\", \n                                description: \"State inconsistency before starting timer. Please try again.\", \n                                variant: \"destructive\" \n                            });\n                            return;\n                        }\n                        startTimer(taskIndex);\n                    } else {\n                        console.error(\"[App onStartTask] Task ID not found in current tasks:\", { taskId });\n                        toast({ \n                            title: \"Task Not Found\", \n                            description: \"The selected task could not be found to start.\", \n                            variant: \"destructive\" \n                        });\n                    }\n                }}\n                currentTaskIndex={currentTaskIndex} // Pass the index\n            />\n          </CardContent>\n        </Card>\n\n        <Card className=\"lg:col-span-3 bg-dark-100 ring-1 ring-dark-300\">\n          <CardHeader>\n            <CardTitle className=\"text-xl font-semibold text-cyanAccent\">Spirals (Ideas for Later)</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <SpiralForm onAddSpiral={handleAddSpiral} />\n            <SpiralList \n              spirals={spirals} \n              onRemoveSpiral={handleRemoveSpiral} \n              onMoveSpiralToTasks={handleMoveSpiralToTasks} \n            />\n          </CardContent>\n        </Card>\n      </main>\n\n      <footer className=\"bg-dark-100 text-subtleText p-6 rounded-lg shadow-lg mt-8 text-center ring-1 ring-dark-300\">\n        <p className=\"text-sm\">Score: <span className='text-timerAccent font-semibold'>{score}</span> | Tasks Completed: <span className='text-timerAccent font-semibold'>{tasks.filter(t => t.completed).length}</span> | Focus Time: <span className='text-timerAccent font-semibold'>{dailyStats.remainingTaskTime} min</span></p>\n      </footer>\n      <Toaster />\n      <PromptDialog \n        isOpen={isPromptOpen}\n        onOpenChange={setIsPromptOpen}\n        title={promptConfig.title}\n        message={promptConfig.message}\n        inputLabel={promptConfig.inputLabel}\n        defaultValue={promptConfig.defaultValue}\n        confirmText={promptConfig.confirmText}\n        cancelText={promptConfig.cancelText}\n        onConfirm={promptConfig.onConfirm}\n        placeholder={promptConfig.placeholder}\n      />\n    </div>\n  );\n}\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}