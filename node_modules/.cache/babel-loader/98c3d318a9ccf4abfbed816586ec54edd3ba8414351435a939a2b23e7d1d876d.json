{"ast":null,"code":"var _jsxFileName = \"/home/poodle/Work/TimeBoxing/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport Layout from './components/Layout';\nimport FocusView from './components/FocusView';\nimport PlanView from './components/PlanView';\nimport SpiralFormC from './components/SpiralForm';\nimport SpiralListC from './components/SpiralList';\nimport DashboardViewC from './components/DashboardView';\nimport { toast } from './hooks/use-toast';\nimport confetti from 'canvas-confetti';\nimport { PromptDialog } from './components/ui/PromptDialog';\nimport * as statsHistory from './lib/statsHistory';\n\n// Different quote categories\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst quoteCategories = {\n  nagging: [\"You won't be able to do it... Prove me wrong!\", \"Don't disappoint future you.\", \"Less scrolling, more doing!\", \"That task isn't going to complete itself.\", \"Are you a talker or a doer?\", \"Time is ticking. Are you?\", \"Stop procrastinating. Start dominating.\", \"Is this the best use of your time right now?\", \"The clock is your boss. Don't get fired.\"],\n  rude: [\"Are you actually going to finish this time?\", \"Your procrastination is impressive, really.\", \"Oh look, another task you'll abandon.\", \"Half-finished tasks won't impress anyone.\", \"You call that productivity? I've seen snails move faster.\", \"Your to-do list is laughing at you right now.\", \"Great, another project for your 'abandoned' collection.\", \"Are you even trying at this point?\", \"Your focus is as stable as a house of cards.\"],\n  annoying: [\"Tick tock! Time is passing! Tick tock!\", \"Hey! Hey! Hey! You should be working!\", \"Don't stop! Keep going! Don't stop! Keep going!\", \"Are you distracted yet? How about now? Now?\", \"This won't complete itself! This won't complete itself!\", \"Focus! Focus! Focus! Are you focused yet?\", \"Hey, remember that deadline? It's coming! Coming! Coming!\", \"Still working? Still working? Still working?\", \"Did you finish yet? No? How about now? Now? Now?\"],\n  abusive: [\"Your productivity is an absolute joke.\", \"Even a child could finish this faster than you.\", \"Pathetic effort as usual.\", \"You'll never amount to anything at this rate.\", \"Everyone else finished hours ago. What's your excuse?\", \"Failure is your only consistent achievement.\", \"No wonder nobody takes your work seriously.\", \"This is why you're always behind everyone else.\", \"Your lack of discipline is embarrassing.\"]\n};\nconst POINTS_PER_TASK = 10;\nconst MAX_TIME_SAVED_BONUS = 10; // Max bonus points for saving time, scaled by percentage\nconst POINTS_DEDUCTION_FOR_EXTENSION = 2; // Penalty for extending a task\n\n// Moved helper functions before their usage in useCallback hooks\nconst formatTime = totalSeconds => {\n  const minutes = Math.floor(totalSeconds / 60);\n  const seconds = totalSeconds % 60;\n  return `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;\n};\nconst formatDurationToHoursMinutes = totalSecondsInput => {\n  const totalSeconds = Math.floor(totalSecondsInput);\n  if (isNaN(totalSeconds) || totalSeconds < 0) return \"0 min\";\n  const hours = Math.floor(totalSeconds / 3600);\n  const minutes = Math.floor(totalSeconds % 3600 / 60);\n  if (hours > 0) return `${hours} hour${hours > 1 ? 's' : ''} ${minutes} min`;\n  if (minutes > 0) return `${minutes} min`;\n  return \"0 min\";\n};\nfunction App() {\n  _s();\n  const [motivationalQuote, setMotivationalQuote] = useState(\"\");\n  const [tasks, setTasks] = useState([]);\n  const [spirals, setSpirals] = useState([]); // For spirals feature\n\n  const [currentTaskIndex, setCurrentTaskIndex] = useState(-1); // Index of the active task in the tasks array\n  const [timeRemaining, setTimeRemaining] = useState(0); // In seconds\n  const [isTimerActive, setIsTimerActive] = useState(false); // Is the countdown interval running?\n  const [isBreakTime, setIsBreakTime] = useState(false);\n  const timerIntervalId = useRef(null); // Using useRef to hold interval ID to avoid re-renders causing issues\n\n  const [score, setScore] = useState(0);\n  const notificationSound = useRef(null);\n  const quoteIntervalId = useRef(null);\n\n  // Settings state\n  const [quoteType, setQuoteType] = useState(\"abusive\"); // Default quote type\n  const [soundEnabled, setSoundEnabled] = useState(true); // Default sound setting\n  const [theme, setTheme] = useState(\"dark\"); // Default theme setting\n  const [breakDuration, setBreakDuration] = useState(5); // Default break duration in minutes\n  const [allowExtendBreak, setAllowExtendBreak] = useState(true); // Default setting for extending breaks\n  const [selectedTimezone, setSelectedTimezone] = useState('Asia/Kolkata'); // Default timezone\n  const [dailyResetTime, setDailyResetTime] = useState(\"00:00\"); // Default daily reset time\n  const [lastResetTimestamp, setLastResetTimestamp] = useState(null); // When the last daily reset occurred (timestamp)\n  const [customFinishTime, setCustomFinishTime] = useState(null); // Custom finish time for today\n  const [isLoaded, setIsLoaded] = useState(false); // To prevent saves before loads complete\n  const [activeView, setActiveView] = useState('focus'); // 'focus', 'plan', 'spirals', 'settings', 'dashboard'\n  const [sessionStartTime, setSessionStartTime] = useState(null); // Timestamp when the first task of the session started\n  const [displayedIdleTime, setDisplayedIdleTime] = useState(0); // Idle time in seconds\n\n  // State for PromptDialog\n  const [isPromptOpen, setIsPromptOpen] = useState(false);\n  const [promptConfig, setPromptConfig] = useState({\n    title: '',\n    message: '',\n    inputLabel: '',\n    defaultValue: '',\n    confirmText: 'Confirm',\n    cancelText: 'Cancel',\n    onConfirm: () => {},\n    placeholder: ''\n  });\n\n  // Load settings from localStorage on initial render\n  useEffect(() => {\n    const savedQuoteType = localStorage.getItem('quoteType');\n    const savedSoundEnabled = localStorage.getItem('soundEnabled');\n    const savedTheme = localStorage.getItem('theme');\n    const savedBreakDuration = localStorage.getItem('breakDuration');\n    const savedAllowExtendBreak = localStorage.getItem('allowExtendBreak');\n    const initialDailyResetTime = localStorage.getItem('dailyResetTime') || \"00:00\"; // Get saved or default\n    setDailyResetTime(initialDailyResetTime);\n\n    // Load other settings\n    if (savedQuoteType) setQuoteType(savedQuoteType);\n    if (savedSoundEnabled !== null) setSoundEnabled(savedSoundEnabled === 'true');\n    if (savedTheme) setTheme(savedTheme);\n    if (savedBreakDuration) setBreakDuration(parseInt(savedBreakDuration, 10));\n    if (savedAllowExtendBreak !== null) setAllowExtendBreak(savedAllowExtendBreak === 'true');\n\n    // --- Daily Reset Logic ---\n    const now = Date.now();\n    const [resetHour, resetMinute] = initialDailyResetTime.split(':').map(Number);\n    const todayDateObj = new Date(now);\n    const todaysResetDateTime = new Date(todayDateObj.getFullYear(), todayDateObj.getMonth(), todayDateObj.getDate(), resetHour, resetMinute, 0, 0).getTime();\n    const yesterdayDateObj = new Date(now);\n    yesterdayDateObj.setDate(yesterdayDateObj.getDate() - 1);\n    const yesterdaysResetDateTime = new Date(yesterdayDateObj.getFullYear(), yesterdayDateObj.getMonth(), yesterdayDateObj.getDate(), resetHour, resetMinute, 0, 0).getTime();\n    const savedLastResetTs = localStorage.getItem('lastResetTimestamp');\n    let currentLastResetTs = savedLastResetTs ? parseInt(savedLastResetTs, 10) : null;\n    let performReset = false;\n    if (currentLastResetTs === null) {\n      // First run or cleared storage. Establish baseline. States are already at defaults from useState.\n      currentLastResetTs = now >= todaysResetDateTime ? todaysResetDateTime : yesterdaysResetDateTime;\n      // No data state reset calls (like setTasks([])) needed here, useState did that.\n      // localStorage for these items will be updated by the save hook if they are new.\n    } else {\n      if (now >= todaysResetDateTime && currentLastResetTs < todaysResetDateTime) {\n        performReset = true;\n        currentLastResetTs = todaysResetDateTime; // Update to today's reset time\n      }\n    }\n    setLastResetTimestamp(currentLastResetTs); // Set state for lastResetTimestamp\n\n    // --- Load or Reset Data States ---\n    if (performReset) {\n      // Save the previous day's stats before resetting\n      const previousDayStats = {\n        date: new Date(currentLastResetTs - 86400000).toISOString().split('T')[0],\n        // Yesterday's date\n        focusTime: calculateFocusTime(),\n        idleTime: displayedIdleTime,\n        tasksCompleted: tasks.filter(t => t.completed).length,\n        score: score,\n        totalTasks: tasks.length,\n        totalPlannedTime: tasks.reduce((total, task) => total + task.estimatedDuration, 0)\n      };\n\n      // Save stats to history\n      statsHistory.saveDailyStats(previousDayStats);\n\n      // Now reset current day's data\n      setTasks([]);\n      setScore(0);\n      setDisplayedIdleTime(0);\n      toast({\n        title: \"Daily Reset\",\n        description: `Good morning! Your tasks and stats have been reset for a new day.`,\n        variant: \"default\"\n      });\n    } else {\n      // If not performing a reset, load the saved data\n      const savedTasks = localStorage.getItem('tasks');\n      const savedSpirals = localStorage.getItem('spirals');\n      const savedScore = localStorage.getItem('score');\n      const savedIdleTime = localStorage.getItem('idleTime');\n      if (savedTasks) setTasks(JSON.parse(savedTasks));\n      if (savedSpirals) setSpirals(JSON.parse(savedSpirals));\n      if (savedScore) setScore(parseInt(savedScore, 10));\n      if (savedIdleTime) setDisplayedIdleTime(parseInt(savedIdleTime, 10));\n    }\n\n    // Final steps - apply theme, etc.\n    document.body.classList.toggle('light-theme', theme === 'light');\n\n    // Setup audio if sound is enabled\n    if (soundEnabled) {\n      notificationSound.current = new Audio(`${process.env.PUBLIC_URL}/notification.mp3`);\n      notificationSound.current.load();\n    }\n\n    // Mark loading as complete\n    setIsLoaded(true);\n\n    // Set a random quote at start\n    getRandomQuote();\n\n    // Start quote interval\n    quoteIntervalId.current = setInterval(getRandomQuote, 1000 * 60 * 5); // New quote every 5 minutes\n\n    // Clean up function\n    return () => {\n      if (timerIntervalId.current) clearInterval(timerIntervalId.current);\n      if (quoteIntervalId.current) clearInterval(quoteIntervalId.current);\n    };\n  }, []);\n\n  // Save state changes to localStorage\n  useEffect(() => {\n    // Only save if initial loading is complete to prevent overwriting with initial state\n    if (!isLoaded) return;\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n    localStorage.setItem('spirals', JSON.stringify(spirals));\n    localStorage.setItem('quoteType', quoteType);\n    localStorage.setItem('soundEnabled', soundEnabled.toString());\n    localStorage.setItem('theme', theme);\n    localStorage.setItem('breakDuration', breakDuration.toString());\n    localStorage.setItem('allowExtendBreak', allowExtendBreak.toString());\n    localStorage.setItem('score', score.toString());\n    localStorage.setItem('dailyResetTime', dailyResetTime);\n    localStorage.setItem('lastResetTimestamp', lastResetTimestamp ? lastResetTimestamp.toString() : '');\n    localStorage.setItem('idleTime', displayedIdleTime.toString());\n  }, [tasks, spirals, quoteType, soundEnabled, theme, breakDuration, allowExtendBreak, score, isLoaded, dailyResetTime, lastResetTimestamp, displayedIdleTime]);\n\n  // Get a random quote based on the selected quote type\n  const getRandomQuote = () => {\n    if (!quoteCategories[quoteType]) return;\n    const quotes = quoteCategories[quoteType];\n    const randomIndex = Math.floor(Math.random() * quotes.length);\n    setMotivationalQuote(quotes[randomIndex]);\n  };\n\n  // Timer logic: Update timer every second\n  useEffect(() => {\n    if (isTimerActive && timeRemaining > 0) {\n      timerIntervalId.current = setInterval(() => {\n        setTimeRemaining(prev => prev - 1);\n      }, 1000);\n      return () => clearInterval(timerIntervalId.current);\n    }\n  }, [isTimerActive, timeRemaining]);\n\n  // When timeRemaining reaches 0, handle task completion or break end\n  useEffect(() => {\n    if (timeRemaining === 0 && isTimerActive) {\n      setIsTimerActive(false);\n      clearInterval(timerIntervalId.current);\n\n      // Play notification sound if enabled\n      if (soundEnabled && notificationSound.current) {\n        notificationSound.current.play().catch(e => console.log(\"Audio play error:\", e));\n      }\n      if (isBreakTime) {\n        // Break is over, notify the user\n        toast({\n          title: \"Break Finished\",\n          description: \"Your break is over. Ready to get back to work?\",\n          variant: \"default\"\n        });\n        setIsBreakTime(false);\n      } else if (currentTaskIndex >= 0) {\n        // Task is completed, mark it as done and update score\n        const tasksCopy = [...tasks];\n        const completedTask = tasksCopy[currentTaskIndex];\n\n        // Calculate time saved (if any)\n        const estimatedSeconds = completedTask.estimatedDuration * 60;\n        const actualSeconds = estimatedSeconds - (completedTask.extraTimeAdded || 0) * 60;\n        let timeSavedBonus = 0;\n        if (actualSeconds < estimatedSeconds) {\n          // Time was saved, calculate bonus (up to MAX_TIME_SAVED_BONUS points)\n          const percentageSaved = (estimatedSeconds - actualSeconds) / estimatedSeconds;\n          timeSavedBonus = Math.round(percentageSaved * MAX_TIME_SAVED_BONUS);\n        }\n        const pointsEarned = POINTS_PER_TASK + timeSavedBonus;\n        completedTask.completed = true;\n        completedTask.completedAt = Date.now();\n        tasksCopy[currentTaskIndex] = completedTask;\n        setTasks(tasksCopy);\n        setScore(prevScore => prevScore + pointsEarned);\n        setCurrentTaskIndex(-1);\n        toast({\n          title: \"Task Completed!\",\n          description: `You earned ${pointsEarned} points${timeSavedBonus > 0 ? ` (including ${timeSavedBonus} bonus for finishing early)` : ''}!`,\n          variant: \"default\"\n        });\n\n        // Trigger confetti animation for completion\n        if (typeof confetti === 'function') {\n          confetti({\n            particleCount: 100,\n            spread: 70,\n            origin: {\n              y: 0.6\n            }\n          });\n        }\n\n        // Start a break after task completion\n        startBreak();\n      }\n    }\n  }, [timeRemaining, isTimerActive, currentTaskIndex, isBreakTime, tasks, soundEnabled]);\n\n  // Function to start a break\n  const startBreak = () => {\n    setIsBreakTime(true);\n    setTimeRemaining(breakDuration * 60); // Convert minutes to seconds\n    setIsTimerActive(true);\n  };\n\n  // Function to add a new task to the list\n  const handleAddTask = useCallback(taskData => {\n    const newTask = {\n      id: Date.now(),\n      // Unique ID based on timestamp\n      name: taskData.name,\n      estimatedDuration: taskData.duration,\n      // Duration in minutes\n      completed: false,\n      started: false,\n      createdAt: Date.now(),\n      extraTimeAdded: 0\n    };\n    setTasks(prevTasks => [...prevTasks, newTask]);\n    toast({\n      title: \"Task Added\",\n      description: `\"${taskData.name}\" has been added to your tasks.`,\n      variant: \"default\"\n    });\n  }, []);\n\n  // Function to remove a task from the list\n  const handleRemoveTask = useCallback(taskId => {\n    // If this is the active task, stop the timer first\n    if (currentTaskIndex >= 0 && tasks[currentTaskIndex].id === taskId) {\n      if (isTimerActive) {\n        setIsTimerActive(false);\n        clearInterval(timerIntervalId.current);\n      }\n      setCurrentTaskIndex(-1);\n    }\n    setTasks(prevTasks => prevTasks.filter(task => task.id !== taskId));\n    toast({\n      title: \"Task Removed\",\n      description: \"The task has been removed from your list.\",\n      variant: \"destructive\"\n    });\n  }, [currentTaskIndex, isTimerActive, tasks]);\n\n  // Function to start a task\n  const handleStartTask = useCallback(taskId => {\n    // Find the task index in the tasks array\n    const taskIndex = tasks.findIndex(task => task.id === taskId);\n    if (taskIndex === -1 || tasks[taskIndex].completed) return;\n\n    // Stop any currently running timer\n    if (isTimerActive) {\n      clearInterval(timerIntervalId.current);\n    }\n\n    // Mark this task as started\n    const tasksCopy = [...tasks];\n    tasksCopy[taskIndex].started = true;\n    setTasks(tasksCopy);\n\n    // Set this as the current task\n    setCurrentTaskIndex(taskIndex);\n\n    // Set the timer based on the task duration\n    setTimeRemaining(tasks[taskIndex].estimatedDuration * 60); // Convert minutes to seconds\n\n    // Start the timer\n    setIsTimerActive(true);\n    setIsBreakTime(false);\n\n    // Record session start time if this is the first task of the session\n    if (sessionStartTime === null) {\n      setSessionStartTime(Date.now());\n    }\n  }, [isTimerActive, sessionStartTime, tasks]);\n\n  // Function to handle play/pause for the active timer\n  const handleMasterPlayPause = useCallback(() => {\n    if (currentTaskIndex === -1 && !isBreakTime) return; // No active task or break\n\n    if (isTimerActive) {\n      // Pause the timer\n      clearInterval(timerIntervalId.current);\n      setIsTimerActive(false);\n    } else {\n      // Resume the timer\n      setIsTimerActive(true);\n    }\n  }, [currentTaskIndex, isBreakTime, isTimerActive]);\n\n  // Function to skip the current timer (task or break)\n  const handleSkipTimer = useCallback(() => {\n    clearInterval(timerIntervalId.current);\n    setIsTimerActive(false);\n    if (isBreakTime) {\n      // Skip break\n      setIsBreakTime(false);\n      setTimeRemaining(0);\n      toast({\n        title: \"Break Skipped\",\n        description: \"You've skipped your break. Remember to take breaks when needed!\",\n        variant: \"default\"\n      });\n    } else if (currentTaskIndex >= 0) {\n      // Skip task (mark as incomplete and reset timer)\n      setCurrentTaskIndex(-1);\n      setTimeRemaining(0);\n      toast({\n        title: \"Task Skipped\",\n        description: \"You've skipped the current task. It remains in your task list.\",\n        variant: \"destructive\"\n      });\n    }\n  }, [isBreakTime, currentTaskIndex]);\n\n  // Function to manually mark the current task as complete\n  const handleCompleteTask = useCallback(() => {\n    if (currentTaskIndex === -1 || isBreakTime) return;\n    clearInterval(timerIntervalId.current);\n    setIsTimerActive(false);\n\n    // Mark the task as completed\n    const tasksCopy = [...tasks];\n    tasksCopy[currentTaskIndex].completed = true;\n    tasksCopy[currentTaskIndex].completedAt = Date.now();\n    setTasks(tasksCopy);\n\n    // Award points\n    setScore(prevScore => prevScore + POINTS_PER_TASK);\n    toast({\n      title: \"Task Completed!\",\n      description: `You earned ${POINTS_PER_TASK} points!`,\n      variant: \"default\"\n    });\n\n    // Trigger confetti animation for completion\n    if (typeof confetti === 'function') {\n      confetti({\n        particleCount: 100,\n        spread: 70,\n        origin: {\n          y: 0.6\n        }\n      });\n    }\n\n    // Reset current task\n    setCurrentTaskIndex(-1);\n    setTimeRemaining(0);\n\n    // Start a break\n    startBreak();\n  }, [currentTaskIndex, isBreakTime, tasks]);\n\n  // Function to add time to the current timer (task or break)\n  const handleExtendTimer = useCallback(() => {\n    // Add 1 minute to the timer\n    setTimeRemaining(prev => prev + 60);\n    if (!isBreakTime && currentTaskIndex >= 0) {\n      // For tasks, track how much extra time was added and reduce points\n      const tasksCopy = [...tasks];\n      tasksCopy[currentTaskIndex].extraTimeAdded = (tasksCopy[currentTaskIndex].extraTimeAdded || 0) + 1;\n      setTasks(tasksCopy);\n\n      // Deduct points for extending a task\n      setScore(prevScore => Math.max(0, prevScore - POINTS_DEDUCTION_FOR_EXTENSION));\n      toast({\n        title: \"Time Extended\",\n        description: `Added 1 minute to the task. ${POINTS_DEDUCTION_FOR_EXTENSION} points deducted.`,\n        variant: \"destructive\"\n      });\n    } else if (isBreakTime) {\n      toast({\n        title: \"Break Extended\",\n        description: \"Added 1 minute to your break.\",\n        variant: \"default\"\n      });\n    }\n  }, [currentTaskIndex, isBreakTime, tasks]);\n\n  // Function to calculate total focus time for the day\n  const calculateFocusTime = () => {\n    // Sum up the estimated durations of completed tasks\n    const completedTasksTime = tasks.filter(task => task.completed).reduce((total, task) => total + task.estimatedDuration, 0);\n\n    // Return focus time in minutes\n    return completedTasksTime;\n  };\n\n  // Daily stats calculation\n  const dailyStats = {\n    focusMinutes: calculateFocusTime(),\n    tasksCompleted: tasks.filter(t => t.completed).length,\n    totalTasks: tasks.length,\n    score: score,\n    idleTime: displayedIdleTime\n  };\n\n  // Render the main App component with the appropriate view\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    activeView: activeView,\n    onChangeView: setActiveView,\n    score: score,\n    motivationalQuote: motivationalQuote,\n    children: [activeView === 'focus' && /*#__PURE__*/_jsxDEV(FocusView, {\n      tasks: tasks,\n      currentTaskIndex: currentTaskIndex,\n      timeRemaining: timeRemaining,\n      isTimerActive: isTimerActive,\n      isBreakTime: isBreakTime,\n      onRemoveTask: handleRemoveTask,\n      onStartTask: handleStartTask,\n      onMasterPlayPause: handleMasterPlayPause,\n      onSkipTimer: handleSkipTimer,\n      onCompleteTask: handleCompleteTask,\n      onExtendTimer: handleExtendTimer,\n      activeTaskOriginalId: currentTaskIndex >= 0 ? tasks[currentTaskIndex].id : null,\n      dailyStats: dailyStats\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 560,\n      columnNumber: 9\n    }, this), activeView === 'plan' && /*#__PURE__*/_jsxDEV(PlanView, {\n      tasks: tasks,\n      onAddTask: handleAddTask,\n      onRemoveTask: handleRemoveTask,\n      onStartTask: handleStartTask,\n      currentTaskIndex: currentTaskIndex,\n      activeTaskOriginalId: currentTaskIndex >= 0 ? tasks[currentTaskIndex].id : null,\n      isTimerActive: isTimerActive,\n      isBreakTime: isBreakTime,\n      timeRemaining: timeRemaining,\n      dailyStats: dailyStats\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 578,\n      columnNumber: 9\n    }, this), activeView === 'spirals' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 lg:grid-cols-2 gap-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(SpiralFormC, {\n          onAddSpiral: spiralData => setSpirals([...spirals, spiralData])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 595,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 594,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(SpiralListC, {\n          spirals: spirals,\n          onRemoveSpiral: id => setSpirals(spirals.filter(s => s.id !== id)),\n          onMoveToTasks: spiral => {\n            handleAddTask({\n              name: spiral.name,\n              duration: spiral.estimatedDuration\n            });\n            setSpirals(spirals.filter(s => s.id !== spiral.id));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 598,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 597,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 593,\n      columnNumber: 9\n    }, this), activeView === 'dashboard' && /*#__PURE__*/_jsxDEV(DashboardViewC, {\n      dailyStats: dailyStats\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 614,\n      columnNumber: 9\n    }, this), activeView === 'settings' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 lg:grid-cols-2 gap-6\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Settings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 621,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Settings will be implemented later.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 622,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 619,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 618,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(PromptDialog, {\n      open: isPromptOpen,\n      onOpenChange: setIsPromptOpen,\n      title: promptConfig.title,\n      message: promptConfig.message,\n      inputLabel: promptConfig.inputLabel,\n      defaultValue: promptConfig.defaultValue,\n      confirmText: promptConfig.confirmText,\n      cancelText: promptConfig.cancelText,\n      onConfirm: promptConfig.onConfirm,\n      placeholder: promptConfig.placeholder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 628,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 553,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Ek621HRZL7Uex/kDT1+OCJ2SYE8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","Layout","FocusView","PlanView","SpiralFormC","SpiralListC","DashboardViewC","toast","confetti","PromptDialog","statsHistory","jsxDEV","_jsxDEV","quoteCategories","nagging","rude","annoying","abusive","POINTS_PER_TASK","MAX_TIME_SAVED_BONUS","POINTS_DEDUCTION_FOR_EXTENSION","formatTime","totalSeconds","minutes","Math","floor","seconds","String","padStart","formatDurationToHoursMinutes","totalSecondsInput","isNaN","hours","App","_s","motivationalQuote","setMotivationalQuote","tasks","setTasks","spirals","setSpirals","currentTaskIndex","setCurrentTaskIndex","timeRemaining","setTimeRemaining","isTimerActive","setIsTimerActive","isBreakTime","setIsBreakTime","timerIntervalId","score","setScore","notificationSound","quoteIntervalId","quoteType","setQuoteType","soundEnabled","setSoundEnabled","theme","setTheme","breakDuration","setBreakDuration","allowExtendBreak","setAllowExtendBreak","selectedTimezone","setSelectedTimezone","dailyResetTime","setDailyResetTime","lastResetTimestamp","setLastResetTimestamp","customFinishTime","setCustomFinishTime","isLoaded","setIsLoaded","activeView","setActiveView","sessionStartTime","setSessionStartTime","displayedIdleTime","setDisplayedIdleTime","isPromptOpen","setIsPromptOpen","promptConfig","setPromptConfig","title","message","inputLabel","defaultValue","confirmText","cancelText","onConfirm","placeholder","savedQuoteType","localStorage","getItem","savedSoundEnabled","savedTheme","savedBreakDuration","savedAllowExtendBreak","initialDailyResetTime","parseInt","now","Date","resetHour","resetMinute","split","map","Number","todayDateObj","todaysResetDateTime","getFullYear","getMonth","getDate","getTime","yesterdayDateObj","setDate","yesterdaysResetDateTime","savedLastResetTs","currentLastResetTs","performReset","previousDayStats","date","toISOString","focusTime","calculateFocusTime","idleTime","tasksCompleted","filter","t","completed","length","totalTasks","totalPlannedTime","reduce","total","task","estimatedDuration","saveDailyStats","description","variant","savedTasks","savedSpirals","savedScore","savedIdleTime","JSON","parse","document","body","classList","toggle","current","Audio","process","env","PUBLIC_URL","load","getRandomQuote","setInterval","clearInterval","setItem","stringify","toString","quotes","randomIndex","random","prev","play","catch","e","console","log","tasksCopy","completedTask","estimatedSeconds","actualSeconds","extraTimeAdded","timeSavedBonus","percentageSaved","round","pointsEarned","completedAt","prevScore","particleCount","spread","origin","y","startBreak","handleAddTask","taskData","newTask","id","name","duration","started","createdAt","prevTasks","handleRemoveTask","taskId","handleStartTask","taskIndex","findIndex","handleMasterPlayPause","handleSkipTimer","handleCompleteTask","handleExtendTimer","max","completedTasksTime","dailyStats","focusMinutes","onChangeView","children","onRemoveTask","onStartTask","onMasterPlayPause","onSkipTimer","onCompleteTask","onExtendTimer","activeTaskOriginalId","fileName","_jsxFileName","lineNumber","columnNumber","onAddTask","className","onAddSpiral","spiralData","onRemoveSpiral","s","onMoveToTasks","spiral","open","onOpenChange","_c","$RefreshReg$"],"sources":["/home/poodle/Work/TimeBoxing/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport Layout from './components/Layout';\nimport FocusView from './components/FocusView';\nimport PlanView from './components/PlanView';\nimport SpiralFormC from './components/SpiralForm';\nimport SpiralListC from './components/SpiralList';\nimport DashboardViewC from './components/DashboardView';\nimport { toast } from './hooks/use-toast';\nimport confetti from 'canvas-confetti';\nimport { PromptDialog } from './components/ui/PromptDialog';\nimport * as statsHistory from './lib/statsHistory';\n\n// Different quote categories\nconst quoteCategories = {\n  nagging: [\n    \"You won't be able to do it... Prove me wrong!\",\n    \"Don't disappoint future you.\",\n    \"Less scrolling, more doing!\",\n    \"That task isn't going to complete itself.\",\n    \"Are you a talker or a doer?\",\n    \"Time is ticking. Are you?\",\n    \"Stop procrastinating. Start dominating.\",\n    \"Is this the best use of your time right now?\",\n    \"The clock is your boss. Don't get fired.\"\n  ],\n  rude: [\n    \"Are you actually going to finish this time?\",\n    \"Your procrastination is impressive, really.\",\n    \"Oh look, another task you'll abandon.\",\n    \"Half-finished tasks won't impress anyone.\",\n    \"You call that productivity? I've seen snails move faster.\",\n    \"Your to-do list is laughing at you right now.\",\n    \"Great, another project for your 'abandoned' collection.\",\n    \"Are you even trying at this point?\",\n    \"Your focus is as stable as a house of cards.\"\n  ],\n  annoying: [\n    \"Tick tock! Time is passing! Tick tock!\",\n    \"Hey! Hey! Hey! You should be working!\",\n    \"Don't stop! Keep going! Don't stop! Keep going!\",\n    \"Are you distracted yet? How about now? Now?\",\n    \"This won't complete itself! This won't complete itself!\",\n    \"Focus! Focus! Focus! Are you focused yet?\",\n    \"Hey, remember that deadline? It's coming! Coming! Coming!\",\n    \"Still working? Still working? Still working?\",\n    \"Did you finish yet? No? How about now? Now? Now?\"\n  ],\n  abusive: [\n    \"Your productivity is an absolute joke.\",\n    \"Even a child could finish this faster than you.\",\n    \"Pathetic effort as usual.\",\n    \"You'll never amount to anything at this rate.\",\n    \"Everyone else finished hours ago. What's your excuse?\",\n    \"Failure is your only consistent achievement.\",\n    \"No wonder nobody takes your work seriously.\",\n    \"This is why you're always behind everyone else.\",\n    \"Your lack of discipline is embarrassing.\"\n  ]\n};\n\nconst POINTS_PER_TASK = 10;\nconst MAX_TIME_SAVED_BONUS = 10; // Max bonus points for saving time, scaled by percentage\nconst POINTS_DEDUCTION_FOR_EXTENSION = 2; // Penalty for extending a task\n\n// Moved helper functions before their usage in useCallback hooks\nconst formatTime = (totalSeconds) => {\n  const minutes = Math.floor(totalSeconds / 60);\n  const seconds = totalSeconds % 60;\n  return `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;\n};\n\nconst formatDurationToHoursMinutes = (totalSecondsInput) => {\n  const totalSeconds = Math.floor(totalSecondsInput);\n  if (isNaN(totalSeconds) || totalSeconds < 0) return \"0 min\";\n  const hours = Math.floor(totalSeconds / 3600);\n  const minutes = Math.floor((totalSeconds % 3600) / 60);\n  if (hours > 0) return `${hours} hour${hours > 1 ? 's' : ''} ${minutes} min`;\n  if (minutes > 0) return `${minutes} min`;\n  return \"0 min\";\n};\n\nfunction App() {\n  const [motivationalQuote, setMotivationalQuote] = useState(\"\");\n  const [tasks, setTasks] = useState([]);\n  const [spirals, setSpirals] = useState([]); // For spirals feature\n  \n  const [currentTaskIndex, setCurrentTaskIndex] = useState(-1); // Index of the active task in the tasks array\n  const [timeRemaining, setTimeRemaining] = useState(0); // In seconds\n  const [isTimerActive, setIsTimerActive] = useState(false); // Is the countdown interval running?\n  const [isBreakTime, setIsBreakTime] = useState(false);\n  const timerIntervalId = useRef(null); // Using useRef to hold interval ID to avoid re-renders causing issues\n  \n  const [score, setScore] = useState(0);\n  const notificationSound = useRef(null);\n  const quoteIntervalId = useRef(null);\n\n  // Settings state\n  const [quoteType, setQuoteType] = useState(\"abusive\"); // Default quote type\n  const [soundEnabled, setSoundEnabled] = useState(true); // Default sound setting\n  const [theme, setTheme] = useState(\"dark\"); // Default theme setting\n  const [breakDuration, setBreakDuration] = useState(5); // Default break duration in minutes\n  const [allowExtendBreak, setAllowExtendBreak] = useState(true); // Default setting for extending breaks\n  const [selectedTimezone, setSelectedTimezone] = useState('Asia/Kolkata'); // Default timezone\n  const [dailyResetTime, setDailyResetTime] = useState(\"00:00\"); // Default daily reset time\n  const [lastResetTimestamp, setLastResetTimestamp] = useState(null); // When the last daily reset occurred (timestamp)\n  const [customFinishTime, setCustomFinishTime] = useState(null); // Custom finish time for today\n  const [isLoaded, setIsLoaded] = useState(false); // To prevent saves before loads complete\n  const [activeView, setActiveView] = useState('focus'); // 'focus', 'plan', 'spirals', 'settings', 'dashboard'\n  const [sessionStartTime, setSessionStartTime] = useState(null); // Timestamp when the first task of the session started\n  const [displayedIdleTime, setDisplayedIdleTime] = useState(0); // Idle time in seconds\n  \n  // State for PromptDialog\n  const [isPromptOpen, setIsPromptOpen] = useState(false);\n  const [promptConfig, setPromptConfig] = useState({\n    title: '',\n    message: '',\n    inputLabel: '',\n    defaultValue: '',\n    confirmText: 'Confirm',\n    cancelText: 'Cancel',\n    onConfirm: () => {},\n    placeholder: '',\n  });\n\n  // Load settings from localStorage on initial render\n  useEffect(() => {\n    const savedQuoteType = localStorage.getItem('quoteType');\n    const savedSoundEnabled = localStorage.getItem('soundEnabled');\n    const savedTheme = localStorage.getItem('theme');\n    const savedBreakDuration = localStorage.getItem('breakDuration');\n    const savedAllowExtendBreak = localStorage.getItem('allowExtendBreak');\n    const initialDailyResetTime = localStorage.getItem('dailyResetTime') || \"00:00\"; // Get saved or default\n    setDailyResetTime(initialDailyResetTime);\n    \n    // Load other settings\n    if (savedQuoteType) setQuoteType(savedQuoteType);\n    if (savedSoundEnabled !== null) setSoundEnabled(savedSoundEnabled === 'true');\n    if (savedTheme) setTheme(savedTheme);\n    if (savedBreakDuration) setBreakDuration(parseInt(savedBreakDuration, 10));\n    if (savedAllowExtendBreak !== null) setAllowExtendBreak(savedAllowExtendBreak === 'true');\n\n    // --- Daily Reset Logic ---\n    const now = Date.now();\n    const [resetHour, resetMinute] = initialDailyResetTime.split(':').map(Number);\n    \n    const todayDateObj = new Date(now);\n    const todaysResetDateTime = new Date(todayDateObj.getFullYear(), todayDateObj.getMonth(), todayDateObj.getDate(), resetHour, resetMinute, 0, 0).getTime();\n    \n    const yesterdayDateObj = new Date(now);\n    yesterdayDateObj.setDate(yesterdayDateObj.getDate() - 1);\n    const yesterdaysResetDateTime = new Date(yesterdayDateObj.getFullYear(), yesterdayDateObj.getMonth(), yesterdayDateObj.getDate(), resetHour, resetMinute, 0, 0).getTime();\n\n    const savedLastResetTs = localStorage.getItem('lastResetTimestamp');\n    let currentLastResetTs = savedLastResetTs ? parseInt(savedLastResetTs, 10) : null;\n    let performReset = false;\n\n    if (currentLastResetTs === null) {\n      // First run or cleared storage. Establish baseline. States are already at defaults from useState.\n      currentLastResetTs = (now >= todaysResetDateTime) ? todaysResetDateTime : yesterdaysResetDateTime;\n      // No data state reset calls (like setTasks([])) needed here, useState did that.\n      // localStorage for these items will be updated by the save hook if they are new.\n    } else {\n      if (now >= todaysResetDateTime && currentLastResetTs < todaysResetDateTime) {\n        performReset = true;\n        currentLastResetTs = todaysResetDateTime; // Update to today's reset time\n      }\n    }\n    setLastResetTimestamp(currentLastResetTs); // Set state for lastResetTimestamp\n\n    // --- Load or Reset Data States ---\n    if (performReset) {\n      // Save the previous day's stats before resetting\n      const previousDayStats = {\n        date: new Date(currentLastResetTs - 86400000).toISOString().split('T')[0], // Yesterday's date\n        focusTime: calculateFocusTime(),\n        idleTime: displayedIdleTime,\n        tasksCompleted: tasks.filter(t => t.completed).length,\n        score: score,\n        totalTasks: tasks.length,\n        totalPlannedTime: tasks.reduce((total, task) => total + task.estimatedDuration, 0)\n      };\n      \n      // Save stats to history\n      statsHistory.saveDailyStats(previousDayStats);\n      \n      // Now reset current day's data\n      setTasks([]);\n      setScore(0);\n      setDisplayedIdleTime(0);\n      \n      toast({\n        title: \"Daily Reset\",\n        description: `Good morning! Your tasks and stats have been reset for a new day.`,\n        variant: \"default\",\n      });\n    } else {\n      // If not performing a reset, load the saved data\n      const savedTasks = localStorage.getItem('tasks');\n      const savedSpirals = localStorage.getItem('spirals');\n      const savedScore = localStorage.getItem('score');\n      const savedIdleTime = localStorage.getItem('idleTime');\n      \n      if (savedTasks) setTasks(JSON.parse(savedTasks));\n      if (savedSpirals) setSpirals(JSON.parse(savedSpirals));\n      if (savedScore) setScore(parseInt(savedScore, 10));\n      if (savedIdleTime) setDisplayedIdleTime(parseInt(savedIdleTime, 10));\n    }\n\n    // Final steps - apply theme, etc.\n    document.body.classList.toggle('light-theme', theme === 'light');\n    \n    // Setup audio if sound is enabled\n    if (soundEnabled) {\n      notificationSound.current = new Audio(`${process.env.PUBLIC_URL}/notification.mp3`);\n      notificationSound.current.load();\n    }\n    \n    // Mark loading as complete\n    setIsLoaded(true);\n    \n    // Set a random quote at start\n    getRandomQuote();\n    \n    // Start quote interval\n    quoteIntervalId.current = setInterval(getRandomQuote, 1000 * 60 * 5); // New quote every 5 minutes\n    \n    // Clean up function\n    return () => {\n      if (timerIntervalId.current) clearInterval(timerIntervalId.current);\n      if (quoteIntervalId.current) clearInterval(quoteIntervalId.current);\n    };\n  }, []);\n\n  // Save state changes to localStorage\n  useEffect(() => {\n    // Only save if initial loading is complete to prevent overwriting with initial state\n    if (!isLoaded) return;\n    \n    localStorage.setItem('tasks', JSON.stringify(tasks));\n    localStorage.setItem('spirals', JSON.stringify(spirals));\n    localStorage.setItem('quoteType', quoteType);\n    localStorage.setItem('soundEnabled', soundEnabled.toString());\n    localStorage.setItem('theme', theme);\n    localStorage.setItem('breakDuration', breakDuration.toString());\n    localStorage.setItem('allowExtendBreak', allowExtendBreak.toString());\n    localStorage.setItem('score', score.toString());\n    localStorage.setItem('dailyResetTime', dailyResetTime);\n    localStorage.setItem('lastResetTimestamp', lastResetTimestamp ? lastResetTimestamp.toString() : '');\n    localStorage.setItem('idleTime', displayedIdleTime.toString());\n  }, [\n    tasks, spirals, quoteType, soundEnabled, theme, breakDuration, \n    allowExtendBreak, score, isLoaded, dailyResetTime, lastResetTimestamp, displayedIdleTime\n  ]);\n\n  // Get a random quote based on the selected quote type\n  const getRandomQuote = () => {\n    if (!quoteCategories[quoteType]) return;\n    \n    const quotes = quoteCategories[quoteType];\n    const randomIndex = Math.floor(Math.random() * quotes.length);\n    setMotivationalQuote(quotes[randomIndex]);\n  };\n\n  // Timer logic: Update timer every second\n  useEffect(() => {\n    if (isTimerActive && timeRemaining > 0) {\n      timerIntervalId.current = setInterval(() => {\n        setTimeRemaining(prev => prev - 1);\n      }, 1000);\n      \n      return () => clearInterval(timerIntervalId.current);\n    }\n  }, [isTimerActive, timeRemaining]);\n\n  // When timeRemaining reaches 0, handle task completion or break end\n  useEffect(() => {\n    if (timeRemaining === 0 && isTimerActive) {\n      setIsTimerActive(false);\n      clearInterval(timerIntervalId.current);\n      \n      // Play notification sound if enabled\n      if (soundEnabled && notificationSound.current) {\n        notificationSound.current.play().catch(e => console.log(\"Audio play error:\", e));\n      }\n      \n      if (isBreakTime) {\n        // Break is over, notify the user\n        toast({\n          title: \"Break Finished\",\n          description: \"Your break is over. Ready to get back to work?\",\n          variant: \"default\",\n        });\n        setIsBreakTime(false);\n      } else if (currentTaskIndex >= 0) {\n        // Task is completed, mark it as done and update score\n        const tasksCopy = [...tasks];\n        const completedTask = tasksCopy[currentTaskIndex];\n        \n        // Calculate time saved (if any)\n        const estimatedSeconds = completedTask.estimatedDuration * 60;\n        const actualSeconds = estimatedSeconds - (completedTask.extraTimeAdded || 0) * 60;\n        let timeSavedBonus = 0;\n        \n        if (actualSeconds < estimatedSeconds) {\n          // Time was saved, calculate bonus (up to MAX_TIME_SAVED_BONUS points)\n          const percentageSaved = (estimatedSeconds - actualSeconds) / estimatedSeconds;\n          timeSavedBonus = Math.round(percentageSaved * MAX_TIME_SAVED_BONUS);\n        }\n        \n        const pointsEarned = POINTS_PER_TASK + timeSavedBonus;\n        \n        completedTask.completed = true;\n        completedTask.completedAt = Date.now();\n        tasksCopy[currentTaskIndex] = completedTask;\n        \n        setTasks(tasksCopy);\n        setScore(prevScore => prevScore + pointsEarned);\n        setCurrentTaskIndex(-1);\n        \n        toast({\n          title: \"Task Completed!\",\n          description: `You earned ${pointsEarned} points${timeSavedBonus > 0 ? ` (including ${timeSavedBonus} bonus for finishing early)` : ''}!`,\n          variant: \"default\",\n        });\n        \n        // Trigger confetti animation for completion\n        if (typeof confetti === 'function') {\n          confetti({\n            particleCount: 100,\n            spread: 70,\n            origin: { y: 0.6 }\n          });\n        }\n        \n        // Start a break after task completion\n        startBreak();\n      }\n    }\n  }, [timeRemaining, isTimerActive, currentTaskIndex, isBreakTime, tasks, soundEnabled]);\n\n  // Function to start a break\n  const startBreak = () => {\n    setIsBreakTime(true);\n    setTimeRemaining(breakDuration * 60); // Convert minutes to seconds\n    setIsTimerActive(true);\n  };\n\n  // Function to add a new task to the list\n  const handleAddTask = useCallback((taskData) => {\n    const newTask = {\n      id: Date.now(), // Unique ID based on timestamp\n      name: taskData.name,\n      estimatedDuration: taskData.duration, // Duration in minutes\n      completed: false,\n      started: false,\n      createdAt: Date.now(),\n      extraTimeAdded: 0\n    };\n    \n    setTasks(prevTasks => [...prevTasks, newTask]);\n    \n    toast({\n      title: \"Task Added\",\n      description: `\"${taskData.name}\" has been added to your tasks.`,\n      variant: \"default\",\n    });\n  }, []);\n\n  // Function to remove a task from the list\n  const handleRemoveTask = useCallback((taskId) => {\n    // If this is the active task, stop the timer first\n    if (currentTaskIndex >= 0 && tasks[currentTaskIndex].id === taskId) {\n      if (isTimerActive) {\n        setIsTimerActive(false);\n        clearInterval(timerIntervalId.current);\n      }\n      setCurrentTaskIndex(-1);\n    }\n    \n    setTasks(prevTasks => prevTasks.filter(task => task.id !== taskId));\n    \n    toast({\n      title: \"Task Removed\",\n      description: \"The task has been removed from your list.\",\n      variant: \"destructive\",\n    });\n  }, [currentTaskIndex, isTimerActive, tasks]);\n\n  // Function to start a task\n  const handleStartTask = useCallback((taskId) => {\n    // Find the task index in the tasks array\n    const taskIndex = tasks.findIndex(task => task.id === taskId);\n    \n    if (taskIndex === -1 || tasks[taskIndex].completed) return;\n    \n    // Stop any currently running timer\n    if (isTimerActive) {\n      clearInterval(timerIntervalId.current);\n    }\n    \n    // Mark this task as started\n    const tasksCopy = [...tasks];\n    tasksCopy[taskIndex].started = true;\n    setTasks(tasksCopy);\n    \n    // Set this as the current task\n    setCurrentTaskIndex(taskIndex);\n    \n    // Set the timer based on the task duration\n    setTimeRemaining(tasks[taskIndex].estimatedDuration * 60); // Convert minutes to seconds\n    \n    // Start the timer\n    setIsTimerActive(true);\n    setIsBreakTime(false);\n    \n    // Record session start time if this is the first task of the session\n    if (sessionStartTime === null) {\n      setSessionStartTime(Date.now());\n    }\n  }, [isTimerActive, sessionStartTime, tasks]);\n\n  // Function to handle play/pause for the active timer\n  const handleMasterPlayPause = useCallback(() => {\n    if (currentTaskIndex === -1 && !isBreakTime) return; // No active task or break\n    \n    if (isTimerActive) {\n      // Pause the timer\n      clearInterval(timerIntervalId.current);\n      setIsTimerActive(false);\n    } else {\n      // Resume the timer\n      setIsTimerActive(true);\n    }\n  }, [currentTaskIndex, isBreakTime, isTimerActive]);\n\n  // Function to skip the current timer (task or break)\n  const handleSkipTimer = useCallback(() => {\n    clearInterval(timerIntervalId.current);\n    setIsTimerActive(false);\n    \n    if (isBreakTime) {\n      // Skip break\n      setIsBreakTime(false);\n      setTimeRemaining(0);\n      \n      toast({\n        title: \"Break Skipped\",\n        description: \"You've skipped your break. Remember to take breaks when needed!\",\n        variant: \"default\",\n      });\n    } else if (currentTaskIndex >= 0) {\n      // Skip task (mark as incomplete and reset timer)\n      setCurrentTaskIndex(-1);\n      setTimeRemaining(0);\n      \n      toast({\n        title: \"Task Skipped\",\n        description: \"You've skipped the current task. It remains in your task list.\",\n        variant: \"destructive\",\n      });\n    }\n  }, [isBreakTime, currentTaskIndex]);\n\n  // Function to manually mark the current task as complete\n  const handleCompleteTask = useCallback(() => {\n    if (currentTaskIndex === -1 || isBreakTime) return;\n    \n    clearInterval(timerIntervalId.current);\n    setIsTimerActive(false);\n    \n    // Mark the task as completed\n    const tasksCopy = [...tasks];\n    tasksCopy[currentTaskIndex].completed = true;\n    tasksCopy[currentTaskIndex].completedAt = Date.now();\n    setTasks(tasksCopy);\n    \n    // Award points\n    setScore(prevScore => prevScore + POINTS_PER_TASK);\n    \n    toast({\n      title: \"Task Completed!\",\n      description: `You earned ${POINTS_PER_TASK} points!`,\n      variant: \"default\",\n    });\n    \n    // Trigger confetti animation for completion\n    if (typeof confetti === 'function') {\n      confetti({\n        particleCount: 100,\n        spread: 70,\n        origin: { y: 0.6 }\n      });\n    }\n    \n    // Reset current task\n    setCurrentTaskIndex(-1);\n    setTimeRemaining(0);\n    \n    // Start a break\n    startBreak();\n  }, [currentTaskIndex, isBreakTime, tasks]);\n\n  // Function to add time to the current timer (task or break)\n  const handleExtendTimer = useCallback(() => {\n    // Add 1 minute to the timer\n    setTimeRemaining(prev => prev + 60);\n    \n    if (!isBreakTime && currentTaskIndex >= 0) {\n      // For tasks, track how much extra time was added and reduce points\n      const tasksCopy = [...tasks];\n      tasksCopy[currentTaskIndex].extraTimeAdded = (tasksCopy[currentTaskIndex].extraTimeAdded || 0) + 1;\n      setTasks(tasksCopy);\n      \n      // Deduct points for extending a task\n      setScore(prevScore => Math.max(0, prevScore - POINTS_DEDUCTION_FOR_EXTENSION));\n      \n      toast({\n        title: \"Time Extended\",\n        description: `Added 1 minute to the task. ${POINTS_DEDUCTION_FOR_EXTENSION} points deducted.`,\n        variant: \"destructive\",\n      });\n    } else if (isBreakTime) {\n      toast({\n        title: \"Break Extended\",\n        description: \"Added 1 minute to your break.\",\n        variant: \"default\",\n      });\n    }\n  }, [currentTaskIndex, isBreakTime, tasks]);\n\n  // Function to calculate total focus time for the day\n  const calculateFocusTime = () => {\n    // Sum up the estimated durations of completed tasks\n    const completedTasksTime = tasks\n      .filter(task => task.completed)\n      .reduce((total, task) => total + task.estimatedDuration, 0);\n    \n    // Return focus time in minutes\n    return completedTasksTime;\n  };\n\n  // Daily stats calculation\n  const dailyStats = {\n    focusMinutes: calculateFocusTime(),\n    tasksCompleted: tasks.filter(t => t.completed).length,\n    totalTasks: tasks.length,\n    score: score,\n    idleTime: displayedIdleTime\n  };\n\n  // Render the main App component with the appropriate view\n  return (\n    <Layout \n      activeView={activeView}\n      onChangeView={setActiveView}\n      score={score}\n      motivationalQuote={motivationalQuote}\n    >\n      {activeView === 'focus' && (\n        <FocusView \n          tasks={tasks}\n          currentTaskIndex={currentTaskIndex}\n          timeRemaining={timeRemaining}\n          isTimerActive={isTimerActive}\n          isBreakTime={isBreakTime}\n          onRemoveTask={handleRemoveTask}\n          onStartTask={handleStartTask}\n          onMasterPlayPause={handleMasterPlayPause}\n          onSkipTimer={handleSkipTimer}\n          onCompleteTask={handleCompleteTask}\n          onExtendTimer={handleExtendTimer}\n          activeTaskOriginalId={currentTaskIndex >= 0 ? tasks[currentTaskIndex].id : null}\n          dailyStats={dailyStats}\n        />\n      )}\n      \n      {activeView === 'plan' && (\n        <PlanView \n          tasks={tasks}\n          onAddTask={handleAddTask}\n          onRemoveTask={handleRemoveTask}\n          onStartTask={handleStartTask}\n          currentTaskIndex={currentTaskIndex}\n          activeTaskOriginalId={currentTaskIndex >= 0 ? tasks[currentTaskIndex].id : null}\n          isTimerActive={isTimerActive}\n          isBreakTime={isBreakTime}\n          timeRemaining={timeRemaining}\n          dailyStats={dailyStats}\n        />\n      )}\n      \n      {activeView === 'spirals' && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <div>\n            <SpiralFormC onAddSpiral={(spiralData) => setSpirals([...spirals, spiralData])} />\n          </div>\n          <div>\n            <SpiralListC \n              spirals={spirals} \n              onRemoveSpiral={(id) => setSpirals(spirals.filter(s => s.id !== id))}\n              onMoveToTasks={(spiral) => {\n                handleAddTask({\n                  name: spiral.name,\n                  duration: spiral.estimatedDuration\n                });\n                setSpirals(spirals.filter(s => s.id !== spiral.id));\n              }}\n            />\n          </div>\n        </div>\n      )}\n      \n      {activeView === 'dashboard' && (\n        <DashboardViewC dailyStats={dailyStats} />\n      )}\n      \n      {activeView === 'settings' && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <div>\n            {/* Settings panel here - will be implemented later */}\n            <h2>Settings</h2>\n            <p>Settings will be implemented later.</p>\n          </div>\n        </div>\n      )}\n      \n      {/* Prompt Dialog */}\n      <PromptDialog\n        open={isPromptOpen}\n        onOpenChange={setIsPromptOpen}\n        title={promptConfig.title}\n        message={promptConfig.message}\n        inputLabel={promptConfig.inputLabel}\n        defaultValue={promptConfig.defaultValue}\n        confirmText={promptConfig.confirmText}\n        cancelText={promptConfig.cancelText}\n        onConfirm={promptConfig.onConfirm}\n        placeholder={promptConfig.placeholder}\n      />\n    </Layout>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,EAAEC,MAAM,QAAQ,OAAO;AACvE,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,WAAW,MAAM,yBAAyB;AACjD,OAAOC,WAAW,MAAM,yBAAyB;AACjD,OAAOC,cAAc,MAAM,4BAA4B;AACvD,SAASC,KAAK,QAAQ,mBAAmB;AACzC,OAAOC,QAAQ,MAAM,iBAAiB;AACtC,SAASC,YAAY,QAAQ,8BAA8B;AAC3D,OAAO,KAAKC,YAAY,MAAM,oBAAoB;;AAElD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,eAAe,GAAG;EACtBC,OAAO,EAAE,CACP,+CAA+C,EAC/C,8BAA8B,EAC9B,6BAA6B,EAC7B,2CAA2C,EAC3C,6BAA6B,EAC7B,2BAA2B,EAC3B,yCAAyC,EACzC,8CAA8C,EAC9C,0CAA0C,CAC3C;EACDC,IAAI,EAAE,CACJ,6CAA6C,EAC7C,6CAA6C,EAC7C,uCAAuC,EACvC,2CAA2C,EAC3C,2DAA2D,EAC3D,+CAA+C,EAC/C,yDAAyD,EACzD,oCAAoC,EACpC,8CAA8C,CAC/C;EACDC,QAAQ,EAAE,CACR,wCAAwC,EACxC,uCAAuC,EACvC,iDAAiD,EACjD,6CAA6C,EAC7C,yDAAyD,EACzD,2CAA2C,EAC3C,2DAA2D,EAC3D,8CAA8C,EAC9C,kDAAkD,CACnD;EACDC,OAAO,EAAE,CACP,wCAAwC,EACxC,iDAAiD,EACjD,2BAA2B,EAC3B,+CAA+C,EAC/C,uDAAuD,EACvD,8CAA8C,EAC9C,6CAA6C,EAC7C,iDAAiD,EACjD,0CAA0C;AAE9C,CAAC;AAED,MAAMC,eAAe,GAAG,EAAE;AAC1B,MAAMC,oBAAoB,GAAG,EAAE,CAAC,CAAC;AACjC,MAAMC,8BAA8B,GAAG,CAAC,CAAC,CAAC;;AAE1C;AACA,MAAMC,UAAU,GAAIC,YAAY,IAAK;EACnC,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACH,YAAY,GAAG,EAAE,CAAC;EAC7C,MAAMI,OAAO,GAAGJ,YAAY,GAAG,EAAE;EACjC,OAAO,GAAGK,MAAM,CAACJ,OAAO,CAAC,CAACK,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,IAAID,MAAM,CAACD,OAAO,CAAC,CAACE,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;AAClF,CAAC;AAED,MAAMC,4BAA4B,GAAIC,iBAAiB,IAAK;EAC1D,MAAMR,YAAY,GAAGE,IAAI,CAACC,KAAK,CAACK,iBAAiB,CAAC;EAClD,IAAIC,KAAK,CAACT,YAAY,CAAC,IAAIA,YAAY,GAAG,CAAC,EAAE,OAAO,OAAO;EAC3D,MAAMU,KAAK,GAAGR,IAAI,CAACC,KAAK,CAACH,YAAY,GAAG,IAAI,CAAC;EAC7C,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAAEH,YAAY,GAAG,IAAI,GAAI,EAAE,CAAC;EACtD,IAAIU,KAAK,GAAG,CAAC,EAAE,OAAO,GAAGA,KAAK,QAAQA,KAAK,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,IAAIT,OAAO,MAAM;EAC3E,IAAIA,OAAO,GAAG,CAAC,EAAE,OAAO,GAAGA,OAAO,MAAM;EACxC,OAAO,OAAO;AAChB,CAAC;AAED,SAASU,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGvC,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM,CAACwC,KAAK,EAAEC,QAAQ,CAAC,GAAGzC,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAAC0C,OAAO,EAAEC,UAAU,CAAC,GAAG3C,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE5C,MAAM,CAAC4C,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG7C,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9D,MAAM,CAAC8C,aAAa,EAAEC,gBAAgB,CAAC,GAAG/C,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACvD,MAAM,CAACgD,aAAa,EAAEC,gBAAgB,CAAC,GAAGjD,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EAC3D,MAAM,CAACkD,WAAW,EAAEC,cAAc,CAAC,GAAGnD,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAMoD,eAAe,GAAGjD,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;EAEtC,MAAM,CAACkD,KAAK,EAAEC,QAAQ,CAAC,GAAGtD,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAMuD,iBAAiB,GAAGpD,MAAM,CAAC,IAAI,CAAC;EACtC,MAAMqD,eAAe,GAAGrD,MAAM,CAAC,IAAI,CAAC;;EAEpC;EACA,MAAM,CAACsD,SAAS,EAAEC,YAAY,CAAC,GAAG1D,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;EACvD,MAAM,CAAC2D,YAAY,EAAEC,eAAe,CAAC,GAAG5D,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACxD,MAAM,CAAC6D,KAAK,EAAEC,QAAQ,CAAC,GAAG9D,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;EAC5C,MAAM,CAAC+D,aAAa,EAAEC,gBAAgB,CAAC,GAAGhE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACvD,MAAM,CAACiE,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGlE,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAChE,MAAM,CAACmE,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGpE,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC;EAC1E,MAAM,CAACqE,cAAc,EAAEC,iBAAiB,CAAC,GAAGtE,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;EAC/D,MAAM,CAACuE,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGxE,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACpE,MAAM,CAACyE,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG1E,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAChE,MAAM,CAAC2E,QAAQ,EAAEC,WAAW,CAAC,GAAG5E,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACjD,MAAM,CAAC6E,UAAU,EAAEC,aAAa,CAAC,GAAG9E,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;EACvD,MAAM,CAAC+E,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGhF,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAChE,MAAM,CAACiF,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGlF,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;EAE/D;EACA,MAAM,CAACmF,YAAY,EAAEC,eAAe,CAAC,GAAGpF,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACqF,YAAY,EAAEC,eAAe,CAAC,GAAGtF,QAAQ,CAAC;IAC/CuF,KAAK,EAAE,EAAE;IACTC,OAAO,EAAE,EAAE;IACXC,UAAU,EAAE,EAAE;IACdC,YAAY,EAAE,EAAE;IAChBC,WAAW,EAAE,SAAS;IACtBC,UAAU,EAAE,QAAQ;IACpBC,SAAS,EAAEA,CAAA,KAAM,CAAC,CAAC;IACnBC,WAAW,EAAE;EACf,CAAC,CAAC;;EAEF;EACA7F,SAAS,CAAC,MAAM;IACd,MAAM8F,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IACxD,MAAMC,iBAAiB,GAAGF,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IAC9D,MAAME,UAAU,GAAGH,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAChD,MAAMG,kBAAkB,GAAGJ,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;IAChE,MAAMI,qBAAqB,GAAGL,YAAY,CAACC,OAAO,CAAC,kBAAkB,CAAC;IACtE,MAAMK,qBAAqB,GAAGN,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC,IAAI,OAAO,CAAC,CAAC;IACjF3B,iBAAiB,CAACgC,qBAAqB,CAAC;;IAExC;IACA,IAAIP,cAAc,EAAErC,YAAY,CAACqC,cAAc,CAAC;IAChD,IAAIG,iBAAiB,KAAK,IAAI,EAAEtC,eAAe,CAACsC,iBAAiB,KAAK,MAAM,CAAC;IAC7E,IAAIC,UAAU,EAAErC,QAAQ,CAACqC,UAAU,CAAC;IACpC,IAAIC,kBAAkB,EAAEpC,gBAAgB,CAACuC,QAAQ,CAACH,kBAAkB,EAAE,EAAE,CAAC,CAAC;IAC1E,IAAIC,qBAAqB,KAAK,IAAI,EAAEnC,mBAAmB,CAACmC,qBAAqB,KAAK,MAAM,CAAC;;IAEzF;IACA,MAAMG,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC;IACtB,MAAM,CAACE,SAAS,EAAEC,WAAW,CAAC,GAAGL,qBAAqB,CAACM,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC;IAE7E,MAAMC,YAAY,GAAG,IAAIN,IAAI,CAACD,GAAG,CAAC;IAClC,MAAMQ,mBAAmB,GAAG,IAAIP,IAAI,CAACM,YAAY,CAACE,WAAW,CAAC,CAAC,EAAEF,YAAY,CAACG,QAAQ,CAAC,CAAC,EAAEH,YAAY,CAACI,OAAO,CAAC,CAAC,EAAET,SAAS,EAAEC,WAAW,EAAE,CAAC,EAAE,CAAC,CAAC,CAACS,OAAO,CAAC,CAAC;IAEzJ,MAAMC,gBAAgB,GAAG,IAAIZ,IAAI,CAACD,GAAG,CAAC;IACtCa,gBAAgB,CAACC,OAAO,CAACD,gBAAgB,CAACF,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;IACxD,MAAMI,uBAAuB,GAAG,IAAId,IAAI,CAACY,gBAAgB,CAACJ,WAAW,CAAC,CAAC,EAAEI,gBAAgB,CAACH,QAAQ,CAAC,CAAC,EAAEG,gBAAgB,CAACF,OAAO,CAAC,CAAC,EAAET,SAAS,EAAEC,WAAW,EAAE,CAAC,EAAE,CAAC,CAAC,CAACS,OAAO,CAAC,CAAC;IAEzK,MAAMI,gBAAgB,GAAGxB,YAAY,CAACC,OAAO,CAAC,oBAAoB,CAAC;IACnE,IAAIwB,kBAAkB,GAAGD,gBAAgB,GAAGjB,QAAQ,CAACiB,gBAAgB,EAAE,EAAE,CAAC,GAAG,IAAI;IACjF,IAAIE,YAAY,GAAG,KAAK;IAExB,IAAID,kBAAkB,KAAK,IAAI,EAAE;MAC/B;MACAA,kBAAkB,GAAIjB,GAAG,IAAIQ,mBAAmB,GAAIA,mBAAmB,GAAGO,uBAAuB;MACjG;MACA;IACF,CAAC,MAAM;MACL,IAAIf,GAAG,IAAIQ,mBAAmB,IAAIS,kBAAkB,GAAGT,mBAAmB,EAAE;QAC1EU,YAAY,GAAG,IAAI;QACnBD,kBAAkB,GAAGT,mBAAmB,CAAC,CAAC;MAC5C;IACF;IACAxC,qBAAqB,CAACiD,kBAAkB,CAAC,CAAC,CAAC;;IAE3C;IACA,IAAIC,YAAY,EAAE;MAChB;MACA,MAAMC,gBAAgB,GAAG;QACvBC,IAAI,EAAE,IAAInB,IAAI,CAACgB,kBAAkB,GAAG,QAAQ,CAAC,CAACI,WAAW,CAAC,CAAC,CAACjB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAAE;QAC3EkB,SAAS,EAAEC,kBAAkB,CAAC,CAAC;QAC/BC,QAAQ,EAAE/C,iBAAiB;QAC3BgD,cAAc,EAAEzF,KAAK,CAAC0F,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,SAAS,CAAC,CAACC,MAAM;QACrDhF,KAAK,EAAEA,KAAK;QACZiF,UAAU,EAAE9F,KAAK,CAAC6F,MAAM;QACxBE,gBAAgB,EAAE/F,KAAK,CAACgG,MAAM,CAAC,CAACC,KAAK,EAAEC,IAAI,KAAKD,KAAK,GAAGC,IAAI,CAACC,iBAAiB,EAAE,CAAC;MACnF,CAAC;;MAED;MACA9H,YAAY,CAAC+H,cAAc,CAACjB,gBAAgB,CAAC;;MAE7C;MACAlF,QAAQ,CAAC,EAAE,CAAC;MACZa,QAAQ,CAAC,CAAC,CAAC;MACX4B,oBAAoB,CAAC,CAAC,CAAC;MAEvBxE,KAAK,CAAC;QACJ6E,KAAK,EAAE,aAAa;QACpBsD,WAAW,EAAE,mEAAmE;QAChFC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ,CAAC,MAAM;MACL;MACA,MAAMC,UAAU,GAAG/C,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAChD,MAAM+C,YAAY,GAAGhD,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC;MACpD,MAAMgD,UAAU,GAAGjD,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAChD,MAAMiD,aAAa,GAAGlD,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;MAEtD,IAAI8C,UAAU,EAAEtG,QAAQ,CAAC0G,IAAI,CAACC,KAAK,CAACL,UAAU,CAAC,CAAC;MAChD,IAAIC,YAAY,EAAErG,UAAU,CAACwG,IAAI,CAACC,KAAK,CAACJ,YAAY,CAAC,CAAC;MACtD,IAAIC,UAAU,EAAE3F,QAAQ,CAACiD,QAAQ,CAAC0C,UAAU,EAAE,EAAE,CAAC,CAAC;MAClD,IAAIC,aAAa,EAAEhE,oBAAoB,CAACqB,QAAQ,CAAC2C,aAAa,EAAE,EAAE,CAAC,CAAC;IACtE;;IAEA;IACAG,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,MAAM,CAAC,aAAa,EAAE3F,KAAK,KAAK,OAAO,CAAC;;IAEhE;IACA,IAAIF,YAAY,EAAE;MAChBJ,iBAAiB,CAACkG,OAAO,GAAG,IAAIC,KAAK,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,UAAU,mBAAmB,CAAC;MACnFtG,iBAAiB,CAACkG,OAAO,CAACK,IAAI,CAAC,CAAC;IAClC;;IAEA;IACAlF,WAAW,CAAC,IAAI,CAAC;;IAEjB;IACAmF,cAAc,CAAC,CAAC;;IAEhB;IACAvG,eAAe,CAACiG,OAAO,GAAGO,WAAW,CAACD,cAAc,EAAE,IAAI,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;;IAEtE;IACA,OAAO,MAAM;MACX,IAAI3G,eAAe,CAACqG,OAAO,EAAEQ,aAAa,CAAC7G,eAAe,CAACqG,OAAO,CAAC;MACnE,IAAIjG,eAAe,CAACiG,OAAO,EAAEQ,aAAa,CAACzG,eAAe,CAACiG,OAAO,CAAC;IACrE,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAxJ,SAAS,CAAC,MAAM;IACd;IACA,IAAI,CAAC0E,QAAQ,EAAE;IAEfqB,YAAY,CAACkE,OAAO,CAAC,OAAO,EAAEf,IAAI,CAACgB,SAAS,CAAC3H,KAAK,CAAC,CAAC;IACpDwD,YAAY,CAACkE,OAAO,CAAC,SAAS,EAAEf,IAAI,CAACgB,SAAS,CAACzH,OAAO,CAAC,CAAC;IACxDsD,YAAY,CAACkE,OAAO,CAAC,WAAW,EAAEzG,SAAS,CAAC;IAC5CuC,YAAY,CAACkE,OAAO,CAAC,cAAc,EAAEvG,YAAY,CAACyG,QAAQ,CAAC,CAAC,CAAC;IAC7DpE,YAAY,CAACkE,OAAO,CAAC,OAAO,EAAErG,KAAK,CAAC;IACpCmC,YAAY,CAACkE,OAAO,CAAC,eAAe,EAAEnG,aAAa,CAACqG,QAAQ,CAAC,CAAC,CAAC;IAC/DpE,YAAY,CAACkE,OAAO,CAAC,kBAAkB,EAAEjG,gBAAgB,CAACmG,QAAQ,CAAC,CAAC,CAAC;IACrEpE,YAAY,CAACkE,OAAO,CAAC,OAAO,EAAE7G,KAAK,CAAC+G,QAAQ,CAAC,CAAC,CAAC;IAC/CpE,YAAY,CAACkE,OAAO,CAAC,gBAAgB,EAAE7F,cAAc,CAAC;IACtD2B,YAAY,CAACkE,OAAO,CAAC,oBAAoB,EAAE3F,kBAAkB,GAAGA,kBAAkB,CAAC6F,QAAQ,CAAC,CAAC,GAAG,EAAE,CAAC;IACnGpE,YAAY,CAACkE,OAAO,CAAC,UAAU,EAAEjF,iBAAiB,CAACmF,QAAQ,CAAC,CAAC,CAAC;EAChE,CAAC,EAAE,CACD5H,KAAK,EAAEE,OAAO,EAAEe,SAAS,EAAEE,YAAY,EAAEE,KAAK,EAAEE,aAAa,EAC7DE,gBAAgB,EAAEZ,KAAK,EAAEsB,QAAQ,EAAEN,cAAc,EAAEE,kBAAkB,EAAEU,iBAAiB,CACzF,CAAC;;EAEF;EACA,MAAM8E,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAI,CAAC/I,eAAe,CAACyC,SAAS,CAAC,EAAE;IAEjC,MAAM4G,MAAM,GAAGrJ,eAAe,CAACyC,SAAS,CAAC;IACzC,MAAM6G,WAAW,GAAG3I,IAAI,CAACC,KAAK,CAACD,IAAI,CAAC4I,MAAM,CAAC,CAAC,GAAGF,MAAM,CAAChC,MAAM,CAAC;IAC7D9F,oBAAoB,CAAC8H,MAAM,CAACC,WAAW,CAAC,CAAC;EAC3C,CAAC;;EAED;EACArK,SAAS,CAAC,MAAM;IACd,IAAI+C,aAAa,IAAIF,aAAa,GAAG,CAAC,EAAE;MACtCM,eAAe,CAACqG,OAAO,GAAGO,WAAW,CAAC,MAAM;QAC1CjH,gBAAgB,CAACyH,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;MACpC,CAAC,EAAE,IAAI,CAAC;MAER,OAAO,MAAMP,aAAa,CAAC7G,eAAe,CAACqG,OAAO,CAAC;IACrD;EACF,CAAC,EAAE,CAACzG,aAAa,EAAEF,aAAa,CAAC,CAAC;;EAElC;EACA7C,SAAS,CAAC,MAAM;IACd,IAAI6C,aAAa,KAAK,CAAC,IAAIE,aAAa,EAAE;MACxCC,gBAAgB,CAAC,KAAK,CAAC;MACvBgH,aAAa,CAAC7G,eAAe,CAACqG,OAAO,CAAC;;MAEtC;MACA,IAAI9F,YAAY,IAAIJ,iBAAiB,CAACkG,OAAO,EAAE;QAC7ClG,iBAAiB,CAACkG,OAAO,CAACgB,IAAI,CAAC,CAAC,CAACC,KAAK,CAACC,CAAC,IAAIC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEF,CAAC,CAAC,CAAC;MAClF;MAEA,IAAIzH,WAAW,EAAE;QACf;QACAxC,KAAK,CAAC;UACJ6E,KAAK,EAAE,gBAAgB;UACvBsD,WAAW,EAAE,gDAAgD;UAC7DC,OAAO,EAAE;QACX,CAAC,CAAC;QACF3F,cAAc,CAAC,KAAK,CAAC;MACvB,CAAC,MAAM,IAAIP,gBAAgB,IAAI,CAAC,EAAE;QAChC;QACA,MAAMkI,SAAS,GAAG,CAAC,GAAGtI,KAAK,CAAC;QAC5B,MAAMuI,aAAa,GAAGD,SAAS,CAAClI,gBAAgB,CAAC;;QAEjD;QACA,MAAMoI,gBAAgB,GAAGD,aAAa,CAACpC,iBAAiB,GAAG,EAAE;QAC7D,MAAMsC,aAAa,GAAGD,gBAAgB,GAAG,CAACD,aAAa,CAACG,cAAc,IAAI,CAAC,IAAI,EAAE;QACjF,IAAIC,cAAc,GAAG,CAAC;QAEtB,IAAIF,aAAa,GAAGD,gBAAgB,EAAE;UACpC;UACA,MAAMI,eAAe,GAAG,CAACJ,gBAAgB,GAAGC,aAAa,IAAID,gBAAgB;UAC7EG,cAAc,GAAGxJ,IAAI,CAAC0J,KAAK,CAACD,eAAe,GAAG9J,oBAAoB,CAAC;QACrE;QAEA,MAAMgK,YAAY,GAAGjK,eAAe,GAAG8J,cAAc;QAErDJ,aAAa,CAAC3C,SAAS,GAAG,IAAI;QAC9B2C,aAAa,CAACQ,WAAW,GAAG9E,IAAI,CAACD,GAAG,CAAC,CAAC;QACtCsE,SAAS,CAAClI,gBAAgB,CAAC,GAAGmI,aAAa;QAE3CtI,QAAQ,CAACqI,SAAS,CAAC;QACnBxH,QAAQ,CAACkI,SAAS,IAAIA,SAAS,GAAGF,YAAY,CAAC;QAC/CzI,mBAAmB,CAAC,CAAC,CAAC,CAAC;QAEvBnC,KAAK,CAAC;UACJ6E,KAAK,EAAE,iBAAiB;UACxBsD,WAAW,EAAE,cAAcyC,YAAY,UAAUH,cAAc,GAAG,CAAC,GAAG,eAAeA,cAAc,6BAA6B,GAAG,EAAE,GAAG;UACxIrC,OAAO,EAAE;QACX,CAAC,CAAC;;QAEF;QACA,IAAI,OAAOnI,QAAQ,KAAK,UAAU,EAAE;UAClCA,QAAQ,CAAC;YACP8K,aAAa,EAAE,GAAG;YAClBC,MAAM,EAAE,EAAE;YACVC,MAAM,EAAE;cAAEC,CAAC,EAAE;YAAI;UACnB,CAAC,CAAC;QACJ;;QAEA;QACAC,UAAU,CAAC,CAAC;MACd;IACF;EACF,CAAC,EAAE,CAAC/I,aAAa,EAAEE,aAAa,EAAEJ,gBAAgB,EAAEM,WAAW,EAAEV,KAAK,EAAEmB,YAAY,CAAC,CAAC;;EAEtF;EACA,MAAMkI,UAAU,GAAGA,CAAA,KAAM;IACvB1I,cAAc,CAAC,IAAI,CAAC;IACpBJ,gBAAgB,CAACgB,aAAa,GAAG,EAAE,CAAC,CAAC,CAAC;IACtCd,gBAAgB,CAAC,IAAI,CAAC;EACxB,CAAC;;EAED;EACA,MAAM6I,aAAa,GAAG5L,WAAW,CAAE6L,QAAQ,IAAK;IAC9C,MAAMC,OAAO,GAAG;MACdC,EAAE,EAAExF,IAAI,CAACD,GAAG,CAAC,CAAC;MAAE;MAChB0F,IAAI,EAAEH,QAAQ,CAACG,IAAI;MACnBvD,iBAAiB,EAAEoD,QAAQ,CAACI,QAAQ;MAAE;MACtC/D,SAAS,EAAE,KAAK;MAChBgE,OAAO,EAAE,KAAK;MACdC,SAAS,EAAE5F,IAAI,CAACD,GAAG,CAAC,CAAC;MACrB0E,cAAc,EAAE;IAClB,CAAC;IAEDzI,QAAQ,CAAC6J,SAAS,IAAI,CAAC,GAAGA,SAAS,EAAEN,OAAO,CAAC,CAAC;IAE9CtL,KAAK,CAAC;MACJ6E,KAAK,EAAE,YAAY;MACnBsD,WAAW,EAAE,IAAIkD,QAAQ,CAACG,IAAI,iCAAiC;MAC/DpD,OAAO,EAAE;IACX,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMyD,gBAAgB,GAAGrM,WAAW,CAAEsM,MAAM,IAAK;IAC/C;IACA,IAAI5J,gBAAgB,IAAI,CAAC,IAAIJ,KAAK,CAACI,gBAAgB,CAAC,CAACqJ,EAAE,KAAKO,MAAM,EAAE;MAClE,IAAIxJ,aAAa,EAAE;QACjBC,gBAAgB,CAAC,KAAK,CAAC;QACvBgH,aAAa,CAAC7G,eAAe,CAACqG,OAAO,CAAC;MACxC;MACA5G,mBAAmB,CAAC,CAAC,CAAC,CAAC;IACzB;IAEAJ,QAAQ,CAAC6J,SAAS,IAAIA,SAAS,CAACpE,MAAM,CAACQ,IAAI,IAAIA,IAAI,CAACuD,EAAE,KAAKO,MAAM,CAAC,CAAC;IAEnE9L,KAAK,CAAC;MACJ6E,KAAK,EAAE,cAAc;MACrBsD,WAAW,EAAE,2CAA2C;MACxDC,OAAO,EAAE;IACX,CAAC,CAAC;EACJ,CAAC,EAAE,CAAClG,gBAAgB,EAAEI,aAAa,EAAER,KAAK,CAAC,CAAC;;EAE5C;EACA,MAAMiK,eAAe,GAAGvM,WAAW,CAAEsM,MAAM,IAAK;IAC9C;IACA,MAAME,SAAS,GAAGlK,KAAK,CAACmK,SAAS,CAACjE,IAAI,IAAIA,IAAI,CAACuD,EAAE,KAAKO,MAAM,CAAC;IAE7D,IAAIE,SAAS,KAAK,CAAC,CAAC,IAAIlK,KAAK,CAACkK,SAAS,CAAC,CAACtE,SAAS,EAAE;;IAEpD;IACA,IAAIpF,aAAa,EAAE;MACjBiH,aAAa,CAAC7G,eAAe,CAACqG,OAAO,CAAC;IACxC;;IAEA;IACA,MAAMqB,SAAS,GAAG,CAAC,GAAGtI,KAAK,CAAC;IAC5BsI,SAAS,CAAC4B,SAAS,CAAC,CAACN,OAAO,GAAG,IAAI;IACnC3J,QAAQ,CAACqI,SAAS,CAAC;;IAEnB;IACAjI,mBAAmB,CAAC6J,SAAS,CAAC;;IAE9B;IACA3J,gBAAgB,CAACP,KAAK,CAACkK,SAAS,CAAC,CAAC/D,iBAAiB,GAAG,EAAE,CAAC,CAAC,CAAC;;IAE3D;IACA1F,gBAAgB,CAAC,IAAI,CAAC;IACtBE,cAAc,CAAC,KAAK,CAAC;;IAErB;IACA,IAAI4B,gBAAgB,KAAK,IAAI,EAAE;MAC7BC,mBAAmB,CAACyB,IAAI,CAACD,GAAG,CAAC,CAAC,CAAC;IACjC;EACF,CAAC,EAAE,CAACxD,aAAa,EAAE+B,gBAAgB,EAAEvC,KAAK,CAAC,CAAC;;EAE5C;EACA,MAAMoK,qBAAqB,GAAG1M,WAAW,CAAC,MAAM;IAC9C,IAAI0C,gBAAgB,KAAK,CAAC,CAAC,IAAI,CAACM,WAAW,EAAE,OAAO,CAAC;;IAErD,IAAIF,aAAa,EAAE;MACjB;MACAiH,aAAa,CAAC7G,eAAe,CAACqG,OAAO,CAAC;MACtCxG,gBAAgB,CAAC,KAAK,CAAC;IACzB,CAAC,MAAM;MACL;MACAA,gBAAgB,CAAC,IAAI,CAAC;IACxB;EACF,CAAC,EAAE,CAACL,gBAAgB,EAAEM,WAAW,EAAEF,aAAa,CAAC,CAAC;;EAElD;EACA,MAAM6J,eAAe,GAAG3M,WAAW,CAAC,MAAM;IACxC+J,aAAa,CAAC7G,eAAe,CAACqG,OAAO,CAAC;IACtCxG,gBAAgB,CAAC,KAAK,CAAC;IAEvB,IAAIC,WAAW,EAAE;MACf;MACAC,cAAc,CAAC,KAAK,CAAC;MACrBJ,gBAAgB,CAAC,CAAC,CAAC;MAEnBrC,KAAK,CAAC;QACJ6E,KAAK,EAAE,eAAe;QACtBsD,WAAW,EAAE,iEAAiE;QAC9EC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ,CAAC,MAAM,IAAIlG,gBAAgB,IAAI,CAAC,EAAE;MAChC;MACAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;MACvBE,gBAAgB,CAAC,CAAC,CAAC;MAEnBrC,KAAK,CAAC;QACJ6E,KAAK,EAAE,cAAc;QACrBsD,WAAW,EAAE,gEAAgE;QAC7EC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAAC5F,WAAW,EAAEN,gBAAgB,CAAC,CAAC;;EAEnC;EACA,MAAMkK,kBAAkB,GAAG5M,WAAW,CAAC,MAAM;IAC3C,IAAI0C,gBAAgB,KAAK,CAAC,CAAC,IAAIM,WAAW,EAAE;IAE5C+G,aAAa,CAAC7G,eAAe,CAACqG,OAAO,CAAC;IACtCxG,gBAAgB,CAAC,KAAK,CAAC;;IAEvB;IACA,MAAM6H,SAAS,GAAG,CAAC,GAAGtI,KAAK,CAAC;IAC5BsI,SAAS,CAAClI,gBAAgB,CAAC,CAACwF,SAAS,GAAG,IAAI;IAC5C0C,SAAS,CAAClI,gBAAgB,CAAC,CAAC2I,WAAW,GAAG9E,IAAI,CAACD,GAAG,CAAC,CAAC;IACpD/D,QAAQ,CAACqI,SAAS,CAAC;;IAEnB;IACAxH,QAAQ,CAACkI,SAAS,IAAIA,SAAS,GAAGnK,eAAe,CAAC;IAElDX,KAAK,CAAC;MACJ6E,KAAK,EAAE,iBAAiB;MACxBsD,WAAW,EAAE,cAAcxH,eAAe,UAAU;MACpDyH,OAAO,EAAE;IACX,CAAC,CAAC;;IAEF;IACA,IAAI,OAAOnI,QAAQ,KAAK,UAAU,EAAE;MAClCA,QAAQ,CAAC;QACP8K,aAAa,EAAE,GAAG;QAClBC,MAAM,EAAE,EAAE;QACVC,MAAM,EAAE;UAAEC,CAAC,EAAE;QAAI;MACnB,CAAC,CAAC;IACJ;;IAEA;IACA/I,mBAAmB,CAAC,CAAC,CAAC,CAAC;IACvBE,gBAAgB,CAAC,CAAC,CAAC;;IAEnB;IACA8I,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACjJ,gBAAgB,EAAEM,WAAW,EAAEV,KAAK,CAAC,CAAC;;EAE1C;EACA,MAAMuK,iBAAiB,GAAG7M,WAAW,CAAC,MAAM;IAC1C;IACA6C,gBAAgB,CAACyH,IAAI,IAAIA,IAAI,GAAG,EAAE,CAAC;IAEnC,IAAI,CAACtH,WAAW,IAAIN,gBAAgB,IAAI,CAAC,EAAE;MACzC;MACA,MAAMkI,SAAS,GAAG,CAAC,GAAGtI,KAAK,CAAC;MAC5BsI,SAAS,CAAClI,gBAAgB,CAAC,CAACsI,cAAc,GAAG,CAACJ,SAAS,CAAClI,gBAAgB,CAAC,CAACsI,cAAc,IAAI,CAAC,IAAI,CAAC;MAClGzI,QAAQ,CAACqI,SAAS,CAAC;;MAEnB;MACAxH,QAAQ,CAACkI,SAAS,IAAI7J,IAAI,CAACqL,GAAG,CAAC,CAAC,EAAExB,SAAS,GAAGjK,8BAA8B,CAAC,CAAC;MAE9Eb,KAAK,CAAC;QACJ6E,KAAK,EAAE,eAAe;QACtBsD,WAAW,EAAE,+BAA+BtH,8BAA8B,mBAAmB;QAC7FuH,OAAO,EAAE;MACX,CAAC,CAAC;IACJ,CAAC,MAAM,IAAI5F,WAAW,EAAE;MACtBxC,KAAK,CAAC;QACJ6E,KAAK,EAAE,gBAAgB;QACvBsD,WAAW,EAAE,+BAA+B;QAC5CC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAAClG,gBAAgB,EAAEM,WAAW,EAAEV,KAAK,CAAC,CAAC;;EAE1C;EACA,MAAMuF,kBAAkB,GAAGA,CAAA,KAAM;IAC/B;IACA,MAAMkF,kBAAkB,GAAGzK,KAAK,CAC7B0F,MAAM,CAACQ,IAAI,IAAIA,IAAI,CAACN,SAAS,CAAC,CAC9BI,MAAM,CAAC,CAACC,KAAK,EAAEC,IAAI,KAAKD,KAAK,GAAGC,IAAI,CAACC,iBAAiB,EAAE,CAAC,CAAC;;IAE7D;IACA,OAAOsE,kBAAkB;EAC3B,CAAC;;EAED;EACA,MAAMC,UAAU,GAAG;IACjBC,YAAY,EAAEpF,kBAAkB,CAAC,CAAC;IAClCE,cAAc,EAAEzF,KAAK,CAAC0F,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,SAAS,CAAC,CAACC,MAAM;IACrDC,UAAU,EAAE9F,KAAK,CAAC6F,MAAM;IACxBhF,KAAK,EAAEA,KAAK;IACZ2E,QAAQ,EAAE/C;EACZ,CAAC;;EAED;EACA,oBACElE,OAAA,CAACX,MAAM;IACLyE,UAAU,EAAEA,UAAW;IACvBuI,YAAY,EAAEtI,aAAc;IAC5BzB,KAAK,EAAEA,KAAM;IACbf,iBAAiB,EAAEA,iBAAkB;IAAA+K,QAAA,GAEpCxI,UAAU,KAAK,OAAO,iBACrB9D,OAAA,CAACV,SAAS;MACRmC,KAAK,EAAEA,KAAM;MACbI,gBAAgB,EAAEA,gBAAiB;MACnCE,aAAa,EAAEA,aAAc;MAC7BE,aAAa,EAAEA,aAAc;MAC7BE,WAAW,EAAEA,WAAY;MACzBoK,YAAY,EAAEf,gBAAiB;MAC/BgB,WAAW,EAAEd,eAAgB;MAC7Be,iBAAiB,EAAEZ,qBAAsB;MACzCa,WAAW,EAAEZ,eAAgB;MAC7Ba,cAAc,EAAEZ,kBAAmB;MACnCa,aAAa,EAAEZ,iBAAkB;MACjCa,oBAAoB,EAAEhL,gBAAgB,IAAI,CAAC,GAAGJ,KAAK,CAACI,gBAAgB,CAAC,CAACqJ,EAAE,GAAG,IAAK;MAChFiB,UAAU,EAAEA;IAAW;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CACF,EAEAnJ,UAAU,KAAK,MAAM,iBACpB9D,OAAA,CAACT,QAAQ;MACPkC,KAAK,EAAEA,KAAM;MACbyL,SAAS,EAAEnC,aAAc;MACzBwB,YAAY,EAAEf,gBAAiB;MAC/BgB,WAAW,EAAEd,eAAgB;MAC7B7J,gBAAgB,EAAEA,gBAAiB;MACnCgL,oBAAoB,EAAEhL,gBAAgB,IAAI,CAAC,GAAGJ,KAAK,CAACI,gBAAgB,CAAC,CAACqJ,EAAE,GAAG,IAAK;MAChFjJ,aAAa,EAAEA,aAAc;MAC7BE,WAAW,EAAEA,WAAY;MACzBJ,aAAa,EAAEA,aAAc;MAC7BoK,UAAU,EAAEA;IAAW;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CACF,EAEAnJ,UAAU,KAAK,SAAS,iBACvB9D,OAAA;MAAKmN,SAAS,EAAC,uCAAuC;MAAAb,QAAA,gBACpDtM,OAAA;QAAAsM,QAAA,eACEtM,OAAA,CAACR,WAAW;UAAC4N,WAAW,EAAGC,UAAU,IAAKzL,UAAU,CAAC,CAAC,GAAGD,OAAO,EAAE0L,UAAU,CAAC;QAAE;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/E,CAAC,eACNjN,OAAA;QAAAsM,QAAA,eACEtM,OAAA,CAACP,WAAW;UACVkC,OAAO,EAAEA,OAAQ;UACjB2L,cAAc,EAAGpC,EAAE,IAAKtJ,UAAU,CAACD,OAAO,CAACwF,MAAM,CAACoG,CAAC,IAAIA,CAAC,CAACrC,EAAE,KAAKA,EAAE,CAAC,CAAE;UACrEsC,aAAa,EAAGC,MAAM,IAAK;YACzB1C,aAAa,CAAC;cACZI,IAAI,EAAEsC,MAAM,CAACtC,IAAI;cACjBC,QAAQ,EAAEqC,MAAM,CAAC7F;YACnB,CAAC,CAAC;YACFhG,UAAU,CAACD,OAAO,CAACwF,MAAM,CAACoG,CAAC,IAAIA,CAAC,CAACrC,EAAE,KAAKuC,MAAM,CAACvC,EAAE,CAAC,CAAC;UACrD;QAAE;UAAA4B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN,EAEAnJ,UAAU,KAAK,WAAW,iBACzB9D,OAAA,CAACN,cAAc;MAACyM,UAAU,EAAEA;IAAW;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAC1C,EAEAnJ,UAAU,KAAK,UAAU,iBACxB9D,OAAA;MAAKmN,SAAS,EAAC,uCAAuC;MAAAb,QAAA,eACpDtM,OAAA;QAAAsM,QAAA,gBAEEtM,OAAA;UAAAsM,QAAA,EAAI;QAAQ;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACjBjN,OAAA;UAAAsM,QAAA,EAAG;QAAmC;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN,eAGDjN,OAAA,CAACH,YAAY;MACX6N,IAAI,EAAEtJ,YAAa;MACnBuJ,YAAY,EAAEtJ,eAAgB;MAC9BG,KAAK,EAAEF,YAAY,CAACE,KAAM;MAC1BC,OAAO,EAAEH,YAAY,CAACG,OAAQ;MAC9BC,UAAU,EAAEJ,YAAY,CAACI,UAAW;MACpCC,YAAY,EAAEL,YAAY,CAACK,YAAa;MACxCC,WAAW,EAAEN,YAAY,CAACM,WAAY;MACtCC,UAAU,EAAEP,YAAY,CAACO,UAAW;MACpCC,SAAS,EAAER,YAAY,CAACQ,SAAU;MAClCC,WAAW,EAAET,YAAY,CAACS;IAAY;MAAA+H,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACI,CAAC;AAEb;AAAC3L,EAAA,CAhjBQD,GAAG;AAAAuM,EAAA,GAAHvM,GAAG;AAkjBZ,eAAeA,GAAG;AAAC,IAAAuM,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}