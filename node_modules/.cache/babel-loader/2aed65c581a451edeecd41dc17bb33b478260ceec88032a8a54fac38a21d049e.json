{"ast":null,"code":"import _objectSpread from\"/home/poodle/Work/TimeBoxing/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// statsHistory.js\n// Utility functions for handling historical stats\n/**\n * Saves daily stats to localStorage\n * @param {Object} dailyStats - The stats object for the day\n */export const saveDailyStats=dailyStats=>{try{// Get current date in YYYY-MM-DD format\nconst today=new Date().toISOString().split('T')[0];// Get existing history or initialize empty object\nconst existingHistory=JSON.parse(localStorage.getItem('statsHistory')||'{}');// Add today's stats\nexistingHistory[today]=_objectSpread(_objectSpread({},dailyStats),{},{date:today});// Save back to localStorage\nlocalStorage.setItem('statsHistory',JSON.stringify(existingHistory));return true;}catch(error){console.error('Failed to save stats history:',error);return false;}};/**\n * Retrieves stats history from localStorage\n * @param {number} days - Number of days to retrieve (default: 30)\n * @returns {Array} Array of daily stats objects\n */export const getStatsHistory=function(){let days=arguments.length>0&&arguments[0]!==undefined?arguments[0]:30;try{const history=JSON.parse(localStorage.getItem('statsHistory')||'{}');// Convert to array and sort by date (newest first)\nconst historyArray=Object.values(history).sort((a,b)=>new Date(b.date)-new Date(a.date)).slice(0,days);// Limit to specified number of days\nreturn historyArray;}catch(error){console.error('Failed to retrieve stats history:',error);return[];}};/**\n * Clears all saved stats history\n */export const clearStatsHistory=()=>{localStorage.removeItem('statsHistory');};/**\n * Exports stats history as JSON\n * @returns {string} JSON string of stats history\n */export const exportStatsHistory=()=>{try{const history=localStorage.getItem('statsHistory')||'{}';return history;}catch(error){console.error('Failed to export stats history:',error);return'{}';}};/**\n * Imports stats history from JSON\n * @param {string} jsonData - JSON string of stats history\n * @returns {boolean} Success status\n */export const importStatsHistory=jsonData=>{try{// Validate JSON format\nconst parsed=JSON.parse(jsonData);if(typeof parsed!=='object'){throw new Error('Invalid stats history format');}localStorage.setItem('statsHistory',jsonData);return true;}catch(error){console.error('Failed to import stats history:',error);return false;}};","map":{"version":3,"names":["saveDailyStats","dailyStats","today","Date","toISOString","split","existingHistory","JSON","parse","localStorage","getItem","_objectSpread","date","setItem","stringify","error","console","getStatsHistory","days","arguments","length","undefined","history","historyArray","Object","values","sort","a","b","slice","clearStatsHistory","removeItem","exportStatsHistory","importStatsHistory","jsonData","parsed","Error"],"sources":["/home/poodle/Work/TimeBoxing/src/lib/statsHistory.js"],"sourcesContent":["// statsHistory.js\n// Utility functions for handling historical stats\n\n/**\n * Saves daily stats to localStorage\n * @param {Object} dailyStats - The stats object for the day\n */\nexport const saveDailyStats = (dailyStats) => {\n  try {\n    // Get current date in YYYY-MM-DD format\n    const today = new Date().toISOString().split('T')[0];\n    \n    // Get existing history or initialize empty object\n    const existingHistory = JSON.parse(localStorage.getItem('statsHistory') || '{}');\n    \n    // Add today's stats\n    existingHistory[today] = {\n      ...dailyStats,\n      date: today,\n    };\n    \n    // Save back to localStorage\n    localStorage.setItem('statsHistory', JSON.stringify(existingHistory));\n    \n    return true;\n  } catch (error) {\n    console.error('Failed to save stats history:', error);\n    return false;\n  }\n};\n\n/**\n * Retrieves stats history from localStorage\n * @param {number} days - Number of days to retrieve (default: 30)\n * @returns {Array} Array of daily stats objects\n */\nexport const getStatsHistory = (days = 30) => {\n  try {\n    const history = JSON.parse(localStorage.getItem('statsHistory') || '{}');\n    \n    // Convert to array and sort by date (newest first)\n    const historyArray = Object.values(history)\n      .sort((a, b) => new Date(b.date) - new Date(a.date))\n      .slice(0, days); // Limit to specified number of days\n      \n    return historyArray;\n  } catch (error) {\n    console.error('Failed to retrieve stats history:', error);\n    return [];\n  }\n};\n\n/**\n * Clears all saved stats history\n */\nexport const clearStatsHistory = () => {\n  localStorage.removeItem('statsHistory');\n};\n\n/**\n * Exports stats history as JSON\n * @returns {string} JSON string of stats history\n */\nexport const exportStatsHistory = () => {\n  try {\n    const history = localStorage.getItem('statsHistory') || '{}';\n    return history;\n  } catch (error) {\n    console.error('Failed to export stats history:', error);\n    return '{}';\n  }\n};\n\n/**\n * Imports stats history from JSON\n * @param {string} jsonData - JSON string of stats history\n * @returns {boolean} Success status\n */\nexport const importStatsHistory = (jsonData) => {\n  try {\n    // Validate JSON format\n    const parsed = JSON.parse(jsonData);\n    if (typeof parsed !== 'object') {\n      throw new Error('Invalid stats history format');\n    }\n    \n    localStorage.setItem('statsHistory', jsonData);\n    return true;\n  } catch (error) {\n    console.error('Failed to import stats history:', error);\n    return false;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}