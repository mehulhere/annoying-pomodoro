{"ast":null,"code":"// statsHistory.js\n// Utility functions for handling historical stats\n\n/**\n * Saves daily stats to localStorage\n * @param {Object} dailyStats - The stats object for the day\n */\nexport const saveDailyStats = dailyStats => {\n  try {\n    // Get current date in YYYY-MM-DD format\n    const today = new Date().toISOString().split('T')[0];\n\n    // Get existing history or initialize empty object\n    const existingHistory = JSON.parse(localStorage.getItem('statsHistory') || '{}');\n\n    // Add today's stats\n    existingHistory[today] = {\n      ...dailyStats,\n      date: today\n    };\n\n    // Save back to localStorage\n    localStorage.setItem('statsHistory', JSON.stringify(existingHistory));\n    return true;\n  } catch (error) {\n    console.error('Failed to save stats history:', error);\n    return false;\n  }\n};\n\n/**\n * Retrieves stats history from localStorage\n * @param {number} days - Number of days to retrieve (default: 30)\n * @returns {Array} Array of daily stats objects\n */\nexport const getStatsHistory = (days = 30) => {\n  try {\n    const history = JSON.parse(localStorage.getItem('statsHistory') || '{}');\n\n    // Convert to array and sort by date (newest first)\n    const historyArray = Object.values(history).sort((a, b) => new Date(b.date) - new Date(a.date)).slice(0, days); // Limit to specified number of days\n\n    return historyArray;\n  } catch (error) {\n    console.error('Failed to retrieve stats history:', error);\n    return [];\n  }\n};\n\n/**\n * Clears all saved stats history\n */\nexport const clearStatsHistory = () => {\n  localStorage.removeItem('statsHistory');\n};\n\n/**\n * Exports stats history as JSON\n * @returns {string} JSON string of stats history\n */\nexport const exportStatsHistory = () => {\n  try {\n    const history = localStorage.getItem('statsHistory') || '{}';\n    return history;\n  } catch (error) {\n    console.error('Failed to export stats history:', error);\n    return '{}';\n  }\n};\n\n/**\n * Imports stats history from JSON\n * @param {string} jsonData - JSON string of stats history\n * @returns {boolean} Success status\n */\nexport const importStatsHistory = jsonData => {\n  try {\n    // Validate JSON format\n    const parsed = JSON.parse(jsonData);\n    if (typeof parsed !== 'object') {\n      throw new Error('Invalid stats history format');\n    }\n    localStorage.setItem('statsHistory', jsonData);\n    return true;\n  } catch (error) {\n    console.error('Failed to import stats history:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["saveDailyStats","dailyStats","today","Date","toISOString","split","existingHistory","JSON","parse","localStorage","getItem","date","setItem","stringify","error","console","getStatsHistory","days","history","historyArray","Object","values","sort","a","b","slice","clearStatsHistory","removeItem","exportStatsHistory","importStatsHistory","jsonData","parsed","Error"],"sources":["/home/poodle/Work/TimeBoxing/src/lib/statsHistory.js"],"sourcesContent":["// statsHistory.js\n// Utility functions for handling historical stats\n\n/**\n * Saves daily stats to localStorage\n * @param {Object} dailyStats - The stats object for the day\n */\nexport const saveDailyStats = (dailyStats) => {\n  try {\n    // Get current date in YYYY-MM-DD format\n    const today = new Date().toISOString().split('T')[0];\n    \n    // Get existing history or initialize empty object\n    const existingHistory = JSON.parse(localStorage.getItem('statsHistory') || '{}');\n    \n    // Add today's stats\n    existingHistory[today] = {\n      ...dailyStats,\n      date: today,\n    };\n    \n    // Save back to localStorage\n    localStorage.setItem('statsHistory', JSON.stringify(existingHistory));\n    \n    return true;\n  } catch (error) {\n    console.error('Failed to save stats history:', error);\n    return false;\n  }\n};\n\n/**\n * Retrieves stats history from localStorage\n * @param {number} days - Number of days to retrieve (default: 30)\n * @returns {Array} Array of daily stats objects\n */\nexport const getStatsHistory = (days = 30) => {\n  try {\n    const history = JSON.parse(localStorage.getItem('statsHistory') || '{}');\n    \n    // Convert to array and sort by date (newest first)\n    const historyArray = Object.values(history)\n      .sort((a, b) => new Date(b.date) - new Date(a.date))\n      .slice(0, days); // Limit to specified number of days\n      \n    return historyArray;\n  } catch (error) {\n    console.error('Failed to retrieve stats history:', error);\n    return [];\n  }\n};\n\n/**\n * Clears all saved stats history\n */\nexport const clearStatsHistory = () => {\n  localStorage.removeItem('statsHistory');\n};\n\n/**\n * Exports stats history as JSON\n * @returns {string} JSON string of stats history\n */\nexport const exportStatsHistory = () => {\n  try {\n    const history = localStorage.getItem('statsHistory') || '{}';\n    return history;\n  } catch (error) {\n    console.error('Failed to export stats history:', error);\n    return '{}';\n  }\n};\n\n/**\n * Imports stats history from JSON\n * @param {string} jsonData - JSON string of stats history\n * @returns {boolean} Success status\n */\nexport const importStatsHistory = (jsonData) => {\n  try {\n    // Validate JSON format\n    const parsed = JSON.parse(jsonData);\n    if (typeof parsed !== 'object') {\n      throw new Error('Invalid stats history format');\n    }\n    \n    localStorage.setItem('statsHistory', jsonData);\n    return true;\n  } catch (error) {\n    console.error('Failed to import stats history:', error);\n    return false;\n  }\n}; "],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO,MAAMA,cAAc,GAAIC,UAAU,IAAK;EAC5C,IAAI;IACF;IACA,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;;IAEpD;IACA,MAAMC,eAAe,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,IAAI,IAAI,CAAC;;IAEhF;IACAJ,eAAe,CAACJ,KAAK,CAAC,GAAG;MACvB,GAAGD,UAAU;MACbU,IAAI,EAAET;IACR,CAAC;;IAED;IACAO,YAAY,CAACG,OAAO,CAAC,cAAc,EAAEL,IAAI,CAACM,SAAS,CAACP,eAAe,CAAC,CAAC;IAErE,OAAO,IAAI;EACb,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,eAAe,GAAGA,CAACC,IAAI,GAAG,EAAE,KAAK;EAC5C,IAAI;IACF,MAAMC,OAAO,GAAGX,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,IAAI,IAAI,CAAC;;IAExE;IACA,MAAMS,YAAY,GAAGC,MAAM,CAACC,MAAM,CAACH,OAAO,CAAC,CACxCI,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIrB,IAAI,CAACqB,CAAC,CAACb,IAAI,CAAC,GAAG,IAAIR,IAAI,CAACoB,CAAC,CAACZ,IAAI,CAAC,CAAC,CACnDc,KAAK,CAAC,CAAC,EAAER,IAAI,CAAC,CAAC,CAAC;;IAEnB,OAAOE,YAAY;EACrB,CAAC,CAAC,OAAOL,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IACzD,OAAO,EAAE;EACX;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMY,iBAAiB,GAAGA,CAAA,KAAM;EACrCjB,YAAY,CAACkB,UAAU,CAAC,cAAc,CAAC;AACzC,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EACtC,IAAI;IACF,MAAMV,OAAO,GAAGT,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,IAAI,IAAI;IAC5D,OAAOQ,OAAO;EAChB,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMe,kBAAkB,GAAIC,QAAQ,IAAK;EAC9C,IAAI;IACF;IACA,MAAMC,MAAM,GAAGxB,IAAI,CAACC,KAAK,CAACsB,QAAQ,CAAC;IACnC,IAAI,OAAOC,MAAM,KAAK,QAAQ,EAAE;MAC9B,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;IACjD;IAEAvB,YAAY,CAACG,OAAO,CAAC,cAAc,EAAEkB,QAAQ,CAAC;IAC9C,OAAO,IAAI;EACb,CAAC,CAAC,OAAOhB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,OAAO,KAAK;EACd;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}